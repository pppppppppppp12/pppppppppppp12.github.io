<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git hooks无法pre-commit的问题</title>
      <link href="/2019/10/30/git-hooks%E6%97%A0%E6%B3%95pre-commit%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/10/30/git-hooks%E6%97%A0%E6%B3%95pre-commit%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>新构建的antd-pro项目，hooks无法执行pre-commit。<br>在npm run lint-staged检测报错的情况下，git commit没有执行pre-commit钩子，直接提交成功。</p><p><img src="/2019/10/30/git-hooks无法pre-commit的问题/Image1.png" alt></p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>husky要求git版本在2.13.0以上，git版本过低会使husky设置git hooks失败，导致commit跳过了pre-commit，下图为报错信息：</p><p>husky安装时设置git hooks失败</p><p><img src="/2019/10/30/git-hooks无法pre-commit的问题/Image3.png" alt></p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>升级git版本，重新执行cnpm install husky。<br><img src="/2019/10/30/git-hooks无法pre-commit的问题/Image2.png" alt></p><p>资料：<br><a href="https://blog.csdn.net/learn8more/article/details/88564934" target="_blank" rel="noopener">mac下git升级到最新版本</a><br><a href="https://github.com/ant-design/ant-design-pro/issues/5054" target="_blank" rel="noopener">antd-pro issues mark</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mvc模式与数据绑定的方式</title>
      <link href="/2019/03/11/mvc/"/>
      <url>/2019/03/11/mvc/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>页面渲染方式：</p><ul><li>服务端渲染，如smarty后端模板<ul><li>利于seo</li><li>渲染速度更快</li></ul></li><li>浏览器端渲染，前端模板<ul><li>减少维护成本</li><li>提高效率，前后端分离的合作模式</li></ul></li></ul><p><img src="/2019/03/11/mvc/Image.png" alt="Image"></p><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>工作原理：</p><ul><li>模板解析 / 编译 parse / compile</li><li>数据渲染 render</li></ul><h3 id="String-based，基于string的parse和compile过程"><a href="#String-based，基于string的parse和compile过程" class="headerlink" title="String-based，基于string的parse和compile过程"></a>String-based，基于string的parse和compile过程</h3><ul><li>本质上是字符串拼接的形式，遍历html字符串<ul><li>基于正则表达式查找出模板 <code>{ { } }</code></li><li>es6模板字符串</li></ul></li><li>替换模型数据，实现视图渲染，依赖于innerHTML</li></ul><h4 id="典型库"><a href="#典型库" class="headerlink" title="典型库"></a>典型库</h4><ul><li>art-template</li><li>mustache.js</li><li>doT</li></ul><h3 id="Dom-based，基于dom的link或compile过程"><a href="#Dom-based，基于dom的link或compile过程" class="headerlink" title="Dom-based，基于dom的link或compile过程"></a>Dom-based，基于dom的link或compile过程</h3><ul><li>遍历dom树节点属性和子节点，渲染render</li><li>提取dom中的<code>{ { } }</code>关键词，替换数据模型</li><li>基于mvc结构：模板视图，数据模型，引擎函数作为控制器实现数据与视图的绑定</li><li>数据模型更新 -&gt; 视图更新：双向绑定。局部渲染更新</li></ul><h4 id="典型库-1"><a href="#典型库-1" class="headerlink" title="典型库"></a>典型库</h4><ul><li>Angular 脏检测，在特定事件下触发视图刷新</li><li>React 虚拟dom算法检查dom变化</li><li>Vue2 Getter/Setter机制与虚拟dom</li><li>avalonjs</li></ul><h4 id="数据双向绑定的实现"><a href="#数据双向绑定的实现" class="headerlink" title="数据双向绑定的实现"></a>数据双向绑定的实现</h4><ul><li>监听vue实例中data属性，遍历此对象的属性，并使用Object.defineProperty 把这些属性转为getter/setter</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a,b属性值互相依赖，更容易监听对象的变化</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"b"</span>, &#123; <span class="comment">// 对象，属性，属性描述符</span></span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = value / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 更新 obj.a</span></span><br><span class="line">obj.a = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b) <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 更新 obj.b</span></span><br><span class="line">obj.b = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><ul><li>数据描述符<ul><li>可写 / 不可写</li></ul></li><li>属性描述符</li><li>存取描述符<ul><li>getter / setter</li></ul></li></ul><h3 id="Living-templating，基于string的parse和基于dom的compile过程"><a href="#Living-templating，基于string的parse和基于dom的compile过程" class="headerlink" title="Living templating，基于string的parse和基于dom的compile过程"></a>Living templating，基于string的parse和基于dom的compile过程</h3><ul><li>htmlbar</li><li>ractivejs</li><li>regularjs</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+webpack环境构建及依赖插件</title>
      <link href="/2019/03/06/webpack%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/03/06/webpack%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基于vue-cli3搭建基础的项目架构，针对不同的环境进行构建配置：本地环境，测试环境，线上环境。下面是对不同环境的一些配置和依赖工具的说明。</p><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// vue-cli升级到<span class="number">2</span>.<span class="number">9</span>.<span class="number">1</span>后，webpack升级到<span class="number">3</span>.<span class="number">6</span>.<span class="number">0</span>，改成使用webpack.dev.conf.js配置</span><br><span class="line">// node build/dev-server.js</span><br><span class="line">cnpm run dev</span><br><span class="line">webpack-dev-server --inline --progress --config build/webpack.dev.conf.js</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>webpack-dev-server</p><ul><li>hot 开启热更新</li><li>proxyTable 配置接口地址代理，解决接口跨域问题</li></ul></li><li><p>webpack.dev.conf.js</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack服务器配置</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    clientLogLevel: <span class="string">'warning'</span>, <span class="comment">// 消息类型 none error warning info</span></span><br><span class="line">    historyApiFallback: &#123; <span class="comment">// 404响应，替代为index.hmtl</span></span><br><span class="line">      rewrites: [</span><br><span class="line">        &#123; <span class="attr">from</span>: <span class="regexp">/.*/</span>, <span class="attr">to</span>: path.posix.join(config.dev.assetsPublicPath, <span class="string">'index.html'</span>) &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 热更新开启</span></span><br><span class="line">    contentBase: <span class="literal">false</span>, <span class="comment">// since we use CopyWebpackPlugin.</span></span><br><span class="line">    compress: <span class="literal">true</span> <span class="comment">// 启用gzip压缩</span></span><br><span class="line">    host: HOST || config.dev.host,</span><br><span class="line">    port: PORT || config.dev.port,</span><br><span class="line">    open: config.dev.autoOpenBrowser, <span class="comment">// true 是否自动打开浏览器</span></span><br><span class="line">    overlay: config.dev.errorOverlay <span class="comment">// true 编译错误是是否全屏覆盖</span></span><br><span class="line">    publicPath: config.dev.assetsPublicPath, <span class="comment">// '/'</span></span><br><span class="line">    proxy: config.dev.proxyTable, <span class="comment">// 接口请求代理到后端服务器地址</span></span><br><span class="line">    quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin</span></span><br><span class="line">    watchOptions: &#123; <span class="comment">// 获取文件更新通知</span></span><br><span class="line">      poll: config.dev.poll, <span class="comment">// false 是否使用轮询 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ul><li>config/index.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 'http://localhost:8080/auth' ==&gt; 'http://localhost:8889/auth'</span></span><br><span class="line">proxyTable: &#123;</span><br><span class="line">    <span class="string">'/auth'</span>:&#123;</span><br><span class="line">        target: <span class="string">'http://localhost:8889'</span>, <span class="comment">// 目标接口域名</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span> <span class="comment">// 是否跨域</span></span><br><span class="line">     &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm run build_test</span><br><span class="line">node build/build-test.js</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><ul><li>config/index.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">    <span class="comment">// Template for index.html</span></span><br><span class="line">    index: path.resolve(__dirname, <span class="string">'../dist/index.html'</span>),</span><br><span class="line">    <span class="comment">// Paths</span></span><br><span class="line">    assetsRoot: path.resolve(__dirname, <span class="string">'../dist'</span>), <span class="comment">// 输出目录</span></span><br><span class="line">    assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">    assetsPublicPath: <span class="string">'/'</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Source Maps</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">    devtool: <span class="string">'#source-map'</span>,</span><br><span class="line">    cssSourceMap: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 压缩</span></span><br><span class="line">    productionGzip: <span class="literal">false</span>,</span><br><span class="line">    productionGzipExtensions: [<span class="string">'js'</span>, <span class="string">'css'</span>],</span><br><span class="line">    bundleAnalyzerReport: process.env.npm_config_report,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="正式环境"><a href="#正式环境" class="headerlink" title="正式环境"></a>正式环境</h2><h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm run build</span><br><span class="line">node build/build.js</span><br></pre></td></tr></table></figure><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><ul><li>config/index.js map选项设置为false</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">devtool: <span class="string">'#source-map'</span>,</span><br><span class="line">cssSourceMap: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure><h2 id="koa后端"><a href="#koa后端" class="headerlink" title="koa后端"></a>koa后端</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cnpm run server</span><br><span class="line">node app.js</span><br><span class="line">cnpm run server_watch // 监听文件更新，自动重启应用</span><br><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><h2 id="通用工具"><a href="#通用工具" class="headerlink" title="通用工具"></a>通用工具</h2><h3 id="check-versions"><a href="#check-versions" class="headerlink" title="check-versions"></a>check-versions</h3><ul><li>检测node和npm版本</li><li><p>版本配置，package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"engines"</span>: &#123;</span><br><span class="line">        <span class="attr">"node"</span>: <span class="string">"&gt;= 7.6.0"</span>,</span><br><span class="line">        <span class="attr">"npm"</span>: <span class="string">"&gt;= 3.0.0"</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>依赖模块</p><ul><li><code>chalk</code> 控制台高亮</li><li><code>semver</code> 判断版本号</li><li><code>shelljs</code> 执行Unix命令</li><li>child_process 新建子进程，执行命令</li></ul></li></ul><h3 id="环境参数配置"><a href="#环境参数配置" class="headerlink" title="环境参数配置"></a>环境参数配置</h3><ul><li>依赖模块<ul><li><code>webpack-merge</code>拆分与合并配置对象</li><li>webpack.DefinePlugin({‘process.env’: config.build.env}) 设置环境参数</li><li>devtool 开发工具配置，代码调试定位，”cheap-module-eval-source-map” 调试工具</li><li><code>compression-webpack-plugin</code> 正式环境压缩</li></ul></li></ul><h3 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><ul><li><p>浏览器兼容性版本配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"browserslist"</span>: [</span><br><span class="line">        <span class="string">"&gt; 1%"</span>,</span><br><span class="line">        <span class="string">"last 2 versions"</span>,</span><br><span class="line">        <span class="string">"not ie &lt;= 8"</span></span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>依赖模块</p><ul><li>Babel/preset-env 兼容js特性</li><li>postcss 添加浏览器前缀</li><li>postcss-loader，配合使用Autoprefixer css浏览器前缀</li></ul></li></ul><h3 id="html和静态资源"><a href="#html和静态资源" class="headerlink" title="html和静态资源"></a>html和静态资源</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成html文件，并注入资源链接</span></span><br><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  filename: config.build.index,</span><br><span class="line">  template: <span class="string">'index.html'</span>,</span><br><span class="line">  inject: <span class="literal">true</span>,</span><br><span class="line">  favicon: path.join(__dirname, <span class="string">'../'</span>, <span class="string">'src/assets/favicon.ico'</span>),</span><br><span class="line">  minify: &#123;</span><br><span class="line">    removeComments: <span class="literal">true</span>,</span><br><span class="line">    collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">    removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  chunksSortMode: <span class="string">'dependency'</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// 复制静态资源文件</span></span><br><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">    to: config.build.assetsSubDirectory,</span><br><span class="line">    ignore: [<span class="string">'.*'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>依赖模块<ul><li>html-webpack-plugin 生成html，注入资源链接</li><li>copy-webpack-plugin 文件复制到构建目录，通常是static下的库文件，对应配置项 <code>assetsSubDirectory: &#39;static&#39;</code></li><li>url-loader 将小的静态资源文件转化为base64，减少http请求数量</li></ul></li></ul><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分离css文件</span></span><br><span class="line"><span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">  filename: utils.assetsPath(<span class="string">'css/[name].[contenthash].css'</span>)</span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line"><span class="keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">  cssProcessorOptions: config.build.productionSourceMap</span><br><span class="line">    ? &#123; <span class="attr">safe</span>: <span class="literal">true</span>, <span class="attr">map</span>: &#123; <span class="attr">inline</span>: <span class="literal">false</span> &#125; &#125;</span><br><span class="line">    : &#123; <span class="attr">safe</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><ul><li>依赖模块<ul><li>vue-loader</li><li>css-loader </li><li>extract-text-webpack-plugin 分离css文件</li><li>optimize-css-assets-webpack-plugin 压缩css文件</li><li>vue-style-loader</li><li>less 预处理器</li><li>less-loader</li></ul></li></ul><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">  compress: &#123;</span><br><span class="line">    warnings: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  sourceMap: <span class="literal">false</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// 提取公共代码，公共模块打包到vendor</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">'vendor'</span>,</span><br><span class="line">  minChunks: <span class="function"><span class="keyword">function</span> (<span class="params">module, count</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// any required modules inside node_modules are extracted to vendor</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="built_in">module</span>.resource &amp;&amp;</span><br><span class="line">      /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp;</span><br><span class="line">      <span class="built_in">module</span>.resource.indexOf(</span><br><span class="line">        path.join(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">      ) === <span class="number">0</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// 提取公共代码，将业务代码打包到manifest</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">'manifest'</span>,</span><br><span class="line">  chunks: [<span class="string">'vendor'</span>]</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>依赖模块</p><ul><li>webpack.optimize.UglifyJsPlugin </li><li>webpack.optimize.CommonsChunkPlugin</li></ul><h3 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h3><ul><li><script><ul><li><code>babel-loader</code> -&gt; 支持es6，import、export</li><li>require()</li></ul></li><li><style><ul><li><code>style-loader</code></li><li>作用域 scoped、module</li><li>支持与处理器 <code>less-loader</code></li><li>postcss、autoprefixer 浏览器兼容前缀</li></ul></li></ul><p><a href="https://cli.vuejs.org/zh/guide/">api</a></p></script></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue性能优化与代码风格</title>
      <link href="/2019/02/25/vue-%E6%80%A7%E8%83%BD/"/>
      <url>/2019/02/25/vue-%E6%80%A7%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul><li>v-for设置key<br>可复用元素，更新dom时，可根据key来识别唯一元素是否可复用，把dom变动成本降到最低</li><li>v-if和v-for避免用在同一个元素上，减少遍历运算成本和渲染成本<ul><li>过滤列表，将列表作为计算属性返回</li><li>显示隐藏状态，将v-if移至父容器</li></ul></li><li><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97" target="_blank" rel="noopener">路由懒加载</a> <a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">异步组件</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Foo.vue</span></span><br><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">    <span class="comment">// ... 组件定义对象</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 引用组件，Babel需要添加 syntax-dynamic-import解析语法</span></span><br><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Foo.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><a href="https://webpack.docschina.org/guides/code-splitting/" target="_blank" rel="noopener">webpack代码分割</a>，按需加载 webpack4 -&gt; SplitChunksPlugin，<a href="https://blog.csdn.net/qq_26733915/article/details/79458533" target="_blank" rel="noopener">配置指南</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">  <span class="comment">// 代码分离的默认配置参数</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'async'</span>,</span><br><span class="line">      minSize: <span class="number">30000</span>, <span class="comment">// vendor-chunk 大于30k</span></span><br><span class="line">      maxSize: <span class="number">0</span>,</span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      maxAsyncRequests: <span class="number">5</span>, <span class="comment">// 按需加载的代码块，并行请求数量小于等于5</span></span><br><span class="line">      maxInitialRequests: <span class="number">3</span>, <span class="comment">// 初始加载的代码块，并行请求数量小于等于5个</span></span><br><span class="line">      automaticNameDelimiter: <span class="string">'~'</span>,</span><br><span class="line">      name: <span class="literal">true</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendors: &#123; <span class="comment">// 来自node_modules模块</span></span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          priority: <span class="number">-20</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><h3 id="组件样式作用域"><a href="#组件样式作用域" class="headerlink" title="组件样式作用域"></a><a href="https://vue-loader-v14.vuejs.org/zh-cn/features/scoped-css.html" target="_blank" rel="noopener">组件样式作用域</a></h3><ul><li>scoped</li><li>module，生成的css对象注入到组件的$style计算属性</li><li>BEM约定<ul><li>.block 块</li><li>.block__element 元素</li><li>.block–modifier 修饰符</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 `scoped` 特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">.button &#123;</span><br><span class="line">  border: none;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">:class</span>=<span class="string">"[$style.button]"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 CSS Modules --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">module</span>&gt;</span>.button &#123;</span><br><span class="line">  border: none;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"c-Button c-Button--close"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 BEM 约定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>.c-Button &#123;</span><br><span class="line">  border: none;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">&#125;</span><br><span class="line">.c-Button--close &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关于命名风格"><a href="#关于命名风格" class="headerlink" title="关于命名风格"></a>关于命名风格</h3><ul><li>推荐用 $_ 作为私有属性</li><li>单文件组件<ul><li>大驼峰</li><li>横线连接 -</li></ul></li><li>通用基础组件名<ul><li>Base html元素</li><li>App 其他基础组件</li><li>V 第三方ui组件库</li></ul></li><li>单例组件，每个页面只会使用一次<ul><li>TheHeading.vue</li></ul></li><li>模块中紧密耦合的组件<ul><li>模块.vue</li><li>模块Item.vue</li></ul></li><li>组件名使用<ul><li>单文件组件、字符串模板、Jsx中 使用自闭合，大驼峰</li><li>Dom模板中 使用闭合标签，横线连接 -</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件之间的共享状态：store模式与vuex状态管理</title>
      <link href="/2019/02/25/vuex/"/>
      <url>/2019/02/25/vuex/</url>
      
        <content type="html"><![CDATA[<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>共享状态解决以下问题：</p><ul><li>多个组件共享状态state，如兄弟组件之间的状态传递</li><li>不同组件行为需要更新同一state，但不破坏组件之间的单向数据流</li></ul><h2 id="对于简单应用-store模式"><a href="#对于简单应用-store模式" class="headerlink" title="对于简单应用 store模式"></a>对于简单应用 store模式</h2><ul><li>集中式状态管理</li><li>action统一管理state的更新，更好地记录state的变化和调试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> store = &#123;</span><br><span class="line">    debug: <span class="literal">true</span>,</span><br><span class="line">    state: &#123; </span><br><span class="line">        message: <span class="string">'Hello!'</span> </span><br><span class="line">    &#125;, </span><br><span class="line">    setMessageAction (newValue) &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.debug) <span class="built_in">console</span>.log(<span class="string">'setMessageAction triggered with'</span>, newValue) </span><br><span class="line">        <span class="keyword">this</span>.state.message = newValue </span><br><span class="line">    &#125;,</span><br><span class="line">    clearMessageAction () &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.debug) <span class="built_in">console</span>.log(<span class="string">'clearMessageAction triggered'</span>)         </span><br><span class="line">        <span class="keyword">this</span>.state.message = <span class="string">''</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个实例/组件仍然可以拥有和管理自己的私有状态</span></span><br><span class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123; </span><br><span class="line">        <span class="comment">// ... privateState</span></span><br><span class="line">        sharedState: store.state </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="对于大型应用-vuex状态管理"><a href="#对于大型应用-vuex状态管理" class="headerlink" title="对于大型应用 vuex状态管理"></a>对于大型应用 vuex状态管理</h2><ul><li>全局单例模式管理状态</li><li>集中式存储管理应用的所有组件的状态</li></ul><h4 id="store注入根实例，通过this-store访问"><a href="#store注入根实例，通过this-store访问" class="headerlink" title="store注入根实例，通过this.$store访问"></a>store注入根实例，通过this.$store访问</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义单例store</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  mutations: &#123;  &#125;, <span class="comment">// 全局action</span></span><br><span class="line">  modules: &#123; <span class="attr">a</span>: moduleA &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注入根实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store,</span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="app"&gt;&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="modules分割模块"><a href="#modules分割模块" class="headerlink" title="modules分割模块"></a>modules分割模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义store模块</span></span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123;  &#125;,</span><br><span class="line">  mutations: &#123; &#125;,</span><br><span class="line">  actions: &#123;  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="keyword">this</span>.$store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line"><span class="keyword">this</span>.$store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><h4 id="state状态"><a href="#state状态" class="headerlink" title="state状态"></a>state状态</h4><ul><li>状态存储state是响应式的</li><li>通过commit提交mutation去改变状态</li><li>组件可以在计算属性中获取state<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="keyword">this</span>.$store.state.module.selectState</span><br></pre></td></tr></table></figure></li></ul><h4 id="getter计算属性"><a href="#getter计算属性" class="headerlink" title="getter计算属性"></a>getter计算属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line">getters: &#123;</span><br><span class="line">    doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 通过方法访问，并传参</span></span><br><span class="line">    getTodoById: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 引用</span></span><br><span class="line"><span class="keyword">this</span>.$store.getters.doneTodos</span><br><span class="line"> <span class="keyword">this</span>.$store.getters.getTodoById(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h4><ul><li>同步函数</li><li>mutation中变更state</li><li>通过 this.$store.commit(‘funName’) 提交mutation</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">    setFlag (state, params) &#123;</span><br><span class="line">        state.count++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'setFlag'</span>, params)</span><br></pre></td></tr></table></figure><h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><ul><li>异步函数</li><li>action中提交mutation变更state</li><li>通过 this.$store.dispatch() 分发action</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line">actions: &#123;</span><br><span class="line">    funcname (context, params) &#123; <span class="comment">// &#123;commit, state&#125;</span></span><br><span class="line">       <span class="comment">// context.state</span></span><br><span class="line">       <span class="comment">// context.getters</span></span><br><span class="line">      context.commit(<span class="string">'setFlag'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 返回promise</span></span><br><span class="line">    funcname2 (context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;).then().catch()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'funname'</span>, params)</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.$store.dispatch(<span class="string">'funcname2'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础指令与组件通信</title>
      <link href="/2019/02/17/vue-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/02/17/vue-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="vue应用结构"><a href="#vue应用结构" class="headerlink" title="vue应用结构"></a>vue应用结构</h3><ul><li><p>根实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#app'</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;btn-component&gt;<span class="xml"><span class="tag">&lt;/<span class="name">btn-component</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">Vue.component('btn-component', &#123;</span></span><br><span class="line"><span class="regexp">    data: function () &#123;</span></span><br><span class="line"><span class="regexp">        return: &#123; count: 0 &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--动态参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--修饰符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--缩写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"eventname"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>v-for</p><ul><li><p>列表类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(todo, index) in todos"</span> <span class="attr">:key</span>=<span class="string">"todo.id"</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;: &#123;&#123; todo.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in objs"</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>列表响应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********* 数组 *********/</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 变异数组</span></span><br><span class="line"><span class="comment">   * push pop shift unshift splice  sort reverse</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">this</span>.todos.push(&#123;<span class="attr">text</span>: <span class="string">'str'</span>, <span class="attr">id</span>: <span class="string">'111'</span>&#125;)</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 非变异数组</span></span><br><span class="line"><span class="comment">   * 返回新数组，会复用dom替换原来的数组</span></span><br><span class="line"><span class="comment">   * filter concat </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">this</span>.todos.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item.text === <span class="string">'str'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 利用索引设置</span></span><br><span class="line">  <span class="keyword">this</span>.$<span class="keyword">set</span>(this.todos, index, newValue)</span><br><span class="line">  this.todos.splice(index, 1, newValue)</span><br><span class="line">  // this.todos[1] = 'x' // 不是响应性的</span><br><span class="line">  // 设置数组长度</span><br><span class="line">  this.todos.splice(newLength)</span><br><span class="line">  // this.todos.length = 2 // 不是响应性的</span><br><span class="line">/********* 对象 *********/</span><br><span class="line">  // 响应式对象属性需要在data中添加和删除</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      userProfile: &#123;</span><br><span class="line">        name: <span class="string">'Anika'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 修改对象属性</span></span><br><span class="line">  <span class="keyword">this</span>.$<span class="keyword">set</span>(this.obj, 'name', 'str')</span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-model</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-on</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseMessage"</span>&gt;</span>Reverse Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--按键修饰符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"reverseMessage"</span>&gt;</span>Reverse Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事件修饰符--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- stop prevent capture self once passive --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.stop</span>=<span class="string">"reverseMessage"</span>&gt;</span>Reverse Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--鼠标按键修饰符 left right middle--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">"clear"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">"doSomething"</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">"onCtrlClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-once</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; commonString &#125;&#125;<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意防止xss攻击，只对可信内容使用html插值，或进行xss过滤--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"htmlString"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-if </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span> A <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span> B <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span> C <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>属性指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:title</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:title</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>样式，自动添加前缀</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  isNext: false,</span><br><span class="line">  activeClass: 'active',</span><br><span class="line">  activeColor: 'red',</span><br><span class="line">  fontSize: 30</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">&lt;!--对象--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; active: isActive, 'next': isNext &#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">"&#123; fontSize: fontSize + 'px', color: activeColor, display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多重值，用于设置多前缀属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--数组--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[isActive ? activeClass : '', nextClass]"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">"[&#123;color: activeColor&#125;, &#123;fontSize: fontSize + 'px'&#125;]"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><ul><li>data对象 -&gt; 属性</li><li>属性值改变，视图响应</li><li><strong>组件的data必须是个函数</strong>，使组件实例管理独立的数据</li></ul><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul><li>computed对象</li><li>get、set</li></ul><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><ul><li>$el、$data、$props、$refs</li><li>$root、$children、$parent</li><li><code>$options 自定义选项、$isServer、$listeners、$attrs</code></li></ul><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ul><li>数据 $watch、$set、$delete<ul><li>Vue.set() / this.$set()</li><li>$watch 自定义监听器 监听属性变化并异步执行</li></ul></li><li>事件 $on、$once、$off、$emit</li><li>生命周期 $mount、$forceUpdate、$nextTick、$destroy<ul><li>$forceUpdate 迫使实例重新渲染</li><li>$nextTick 将回调延迟到下次dom更新之后执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求成功后 数据赋值</span></span><br><span class="line"><span class="keyword">this</span>.goods = res.data</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue 在这个阶段才会把获取到的数据渲染完成到dom里，然后进行 dom 操作</span></span><br><span class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><ul><li>created、beforeCreate</li><li>mounted、beforeMount</li><li>updated、beforeUpdate // data change</li><li>destroyed、beforeDestroy </li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件之间的数据传递"><a href="#组件之间的数据传递" class="headerlink" title="组件之间的数据传递"></a>组件之间的数据传递</h3><h4 id="父传子-props-，props定义尽量详细"><a href="#父传子-props-，props定义尽量详细" class="headerlink" title="父传子 props ，props定义尽量详细"></a><strong>父传子</strong> <code>props</code> ，<strong>props定义尽量详细</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    status: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">          <span class="string">'syncing'</span>,</span><br><span class="line">          <span class="string">'synced'</span>,</span><br><span class="line">          <span class="string">'version-conflict'</span>,</span><br><span class="line">          <span class="string">'error'</span></span><br><span class="line">        ].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    template: <span class="string">'&lt;li&gt;这是个待办项&lt;/li&gt;'</span> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">"item in groceryList"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind:todo</span>=<span class="string">"item"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子传父，v-on，-emit，监听子组件事件"><a href="#子传父，v-on，-emit，监听子组件事件" class="headerlink" title="子传父，v-on，$emit，监听子组件事件"></a><strong>子传父</strong>，<code>v-on，$emit</code>，监听子组件事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 父组件监听</span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"..."</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:update:fontSize</span>=<span class="string">"postFontSize = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">// 子组件blog-post按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"$emit('update:fontSize', 0.1)"</span>&gt;</span> btn <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.sync</code>修饰符也可以实现<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--.sync用在字面量对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:title.sync</span>=<span class="string">"postFontSize"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="改变另一个组件的实例内部-vuex-大型应用"><a href="#改变另一个组件的实例内部-vuex-大型应用" class="headerlink" title="改变另一个组件的实例内部 vuex [大型应用]"></a>改变另一个组件的实例内部 <code>vuex</code> [大型应用]</h4><h4 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h4><ul><li>访问根实例、父实例<ul><li>$root、$parent // 小型</li></ul></li><li>访问子组件实例或子元素 ref</li><li>依赖注入，与任意后代组件的属性传递<ul><li>provide 指定提供给后代组件的数据/方法</li><li>inject 接收父代组件提供的指定属性</li></ul></li></ul><h3 id="组件加载"><a href="#组件加载" class="headerlink" title="组件加载"></a>组件加载</h3><h4 id="缓存组件-keep-alive"><a href="#缓存组件-keep-alive" class="headerlink" title="缓存组件 keep-alive"></a>缓存组件 keep-alive</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentTabComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'async-webpack-example'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;  </span><br><span class="line"><span class="comment">// 这个特殊的 `require` 语法将会告诉 webpack</span></span><br><span class="line"><span class="comment">// 自动将你的构建代码切割成多个包，这些包 </span></span><br><span class="line"><span class="comment">// 会通过 Ajax 请求加载 </span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'./my-async-component'</span>], resolve) &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.component( <span class="string">'async-webpack-example'</span>, </span><br><span class="line"><span class="comment">// 这个 `import` 函数会返回一个 `Promise` 对象。 </span></span><br><span class="line">() =&gt; <span class="keyword">import</span>(<span class="string">'./my-async-component'</span>) )</span><br></pre></td></tr></table></figure><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><ul><li>完整的语法高亮</li><li>commonJs 模块化管理</li><li>组件作用域的css</li><li>自动化构建步骤，使用预处理器</li></ul><h2 id="提高复用性"><a href="#提高复用性" class="headerlink" title="提高复用性"></a>提高复用性</h2><h3 id="混入对象-minxis"><a href="#混入对象-minxis" class="headerlink" title="混入对象 minxis"></a>混入对象 minxis</h3><ul><li>Vue.minxin 全局混入</li><li>添加组件选项：new Vue({minxis: […]}) / Vue.extend({minxis: […]})</li></ul><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li>Vue.directive(‘string’, {})</li><li>钩子函数<ul><li>bind<ul><li>(el, binding, vnode, oldVnode) 参数只读</li><li>共享数据 dataset —— data-*</li></ul></li><li>inserted</li><li>update</li><li>componentUpdated</li><li>unbind</li></ul></li></ul><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><ul><li>dom 节点树</li><li>虚拟dom<ul><li>对真实dom的变化保持追踪</li><li>虚拟节点Vnode</li></ul></li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="插件类型"><a href="#插件类型" class="headerlink" title="插件类型"></a>插件类型</h4><ul><li>全局方法/属性</li><li>全局资源：自定义指令、自定义过滤器、过渡</li><li>mixin方法添加组件选项、Vue.extend()</li><li>Vue实例方法 Vue.prototype</li><li>引入库</li></ul><h4 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h4><ul><li><p>全局方法 Vue.use()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(MyPlugins)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入并调用vue-router</span></span><br><span class="line"><span class="keyword">var</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>) </span><br><span class="line"><span class="keyword">var</span> VueRouter = <span class="built_in">require</span>(<span class="string">'vue-router'</span>)</span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure></li><li><p>开发插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入单文件组件</span></span><br><span class="line"><span class="keyword">const</span> warnTpl = <span class="built_in">require</span>(<span class="string">'./warnTpl.vue'</span>);</span><br><span class="line"><span class="comment">// 定义插件对象</span></span><br><span class="line"><span class="keyword">const</span> MyPlugins = &#123;&#125;;</span><br><span class="line">MyPlugins.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 注入组件</span></span><br><span class="line">    <span class="keyword">const</span> warnComp = Vue.extend(warnTpl)</span><br><span class="line">    <span class="comment">// 添加全局方法、实例方法</span></span><br><span class="line">    Vue.$warn = Vue.prototype.$warn = <span class="function">(<span class="params">msg, time = <span class="number">1000</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> warnComp(&#123; <span class="comment">// 动态组件</span></span><br><span class="line">            propsData: &#123;</span><br><span class="line">                msg,</span><br><span class="line">                time</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).$mount()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router路由配置与使用</title>
      <link href="/2019/02/17/vue-router/"/>
      <url>/2019/02/17/vue-router/</url>
      
        <content type="html"><![CDATA[<h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><h3 id="使用路由"><a href="#使用路由" class="headerlink" title="使用路由"></a>使用路由</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--命令路由，导航--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user"</span>&gt;</span>Go to User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125; &#125;"</span>&gt;</span>Go to User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内嵌a标签，右击有效，可控制窗口打开方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">"li"</span> <span class="attr">to</span>=<span class="string">"/index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>平台首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--命名视图，路由组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,  <span class="comment">// 根目录下跳转，需要后端配置；默认hash模式</span></span><br><span class="line">  base: __dirname,</span><br><span class="line">  linkActiveClass: <span class="string">'active'</span>, <span class="comment">// 全局配置 激活态类名</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/first/:pid?'</span>, <span class="comment">// ? 可选参数</span></span><br><span class="line">      component: Firstcomponent,</span><br><span class="line">      alias: <span class="string">'/b'</span> <span class="comment">// 别名</span></span><br><span class="line">      meta: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125; <span class="comment">// 定义路由元信息，meta字段</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/second'</span>, <span class="comment">// / 开头的嵌套路径会被当做根路径</span></span><br><span class="line">      components: &#123;</span><br><span class="line">        header: header, <span class="comment">// 对应&lt;router-view&gt;的name</span></span><br><span class="line">        <span class="keyword">default</span>: main,</span><br><span class="line">        footer: footer</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/user/:id'</span>,</span><br><span class="line">      components: &#123; <span class="comment">// 模板传参</span></span><br><span class="line">        <span class="keyword">default</span>: &#123; </span><br><span class="line">            template: <span class="string">'&lt;div&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;router-view name="innerHeader"&gt;&lt;/router-view&gt;'</span> + <span class="string">'&lt;router-view&gt;&lt;/router-view&gt;'</span> + <span class="string">'&lt;/div&gt;'</span> </span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      children: [&#123; <span class="comment">// 嵌套路由</span></span><br><span class="line">          <span class="comment">// 当 /user/:id/profile 匹配成功，</span></span><br><span class="line">          <span class="comment">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          path: <span class="string">'profile'</span>,</span><br><span class="line">          component: UserProfile</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">          <span class="comment">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          path: <span class="string">'posts'</span>,</span><br><span class="line">          component: UserPosts</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'*'</span>,  <span class="comment">// 不存在的地址 重定向</span></span><br><span class="line">      redirect: <span class="string">'/first'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注入路由组件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li>this.$route.name // 当前路由</li><li>params.pid // 获取路由参数</li><li>hash // 获取当前url</li><li>query // 查询参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听路由变化</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'$route'</span>: <span class="string">'callbackFun'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><p>this.$router.push()</p><ul><li>onComplete 导航成功完成后执行</li><li>onAbort </li><li>路由相同，参数不同，使用beforeRouteUpdate响应变化<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">'home'</span>)</span><br><span class="line"><span class="comment">// 对象，path情况下忽略params</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'home'</span> &#125;)</span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">'123'</span> &#125;&#125;)</span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">'private'</span> &#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>go(n)</p></li><li>back()、go(-1)</li><li>replace()</li><li><p>beforeEach((to, from, next) =&gt; {}) 监听路由更新，跳转路由前的入口控制，可用于权限判断</p><ul><li>to 下一个路由</li><li>from 当前路由</li><li>next<ul><li>next() 下一个钩子，直到next()都执行完，才确认跳转</li><li>next(false) 中断跳转</li><li>next(‘/‘) 跳转到指定路由</li></ul></li></ul></li></ul><h2 id="响应路由"><a href="#响应路由" class="headerlink" title="响应路由"></a>响应路由</h2><h3 id="导航完成后获取数据"><a href="#导航完成后获取数据" class="headerlink" title="导航完成后获取数据"></a>导航完成后获取数据</h3><p>created中获取，并展示loading状态<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading"</span> <span class="attr">v-if</span>=<span class="string">"loading"</span>&gt;</span></span><br><span class="line">      Loading...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"error"</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">      &#123;&#123; error &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; post.body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="导航完成前获取数据"><a href="#导航完成前获取数据" class="headerlink" title="导航完成前获取数据"></a>导航完成前获取数据</h3><p>beforeEach，获取后next()</p><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97" target="_blank" rel="noopener">路由懒加载</a></h2><ul><li><a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">异步组件</a>、</li><li><a href="https://webpack.docschina.org/guides/code-splitting/" target="_blank" rel="noopener">webpack代码分割</a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Foo.vue</span></span><br><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">    <span class="comment">// ... 组件定义对象</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 引用组件，Babel需要添加 syntax-dynamic-import解析语法</span></span><br><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Foo.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native性能优化与重绘机制</title>
      <link href="/2019/02/16/react-native-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2019/02/16/react-native-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="减少重绘和并发执行"><a href="#减少重绘和并发执行" class="headerlink" title="减少重绘和并发执行"></a>减少重绘和并发执行</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li><strong>减少不必要的setState</strong><br> setState是用来改变数据，触发视图更新的方法，调用setState会触发组件重绘。在复杂组件中setState会触发整个组件包括其子组件的重绘，这个是导致渲染进程被阻塞的主要原因。因此，应尽量细化组件，在必要的子组件中执行setState，减少在复杂组件中setState带来的重绘成本。</li><li><strong>setNativeProps更新属性</strong><br> 用原生属性更新setNativeProps的方法去替代setState。一些样式属性上的切换和变化，可以用setNativeProps去更新，从而减少重绘。</li><li><strong>shouldComponentUpdate减少不必要的重绘</strong><br>在组件shouldComponentUpdate周期，即重绘render前，判断组件state和props的数据变化，没有变化则不执行重绘。Immutable.js判断复合类型的变化</li><li><strong>PureComponent组件</strong><br> 组件的setState如果只有非对象数据类型的变化，可以用PureComponent，不会根据父组件的重绘而导致自身重绘。</li><li><strong>减少动画时执行阻塞</strong><br>组件初始化后，利用InteractionManager使数据请求在动画完成后再执行，减少js线程和掉帧现象，避免切换组件时动画卡顿和延迟，但是同时会延迟了数据请求，会导致再次渲染。</li><li><strong>提前获取数据，减少渲染</strong><br>组件渲染慢的问题，像个人中心，好友列表等，在进入页面前先把数据加载完毕，在组件初始化的时候赋值state数据，使组件先获得数据，只渲染一次。（若在组件渲染完之后，再获取数据，会再次渲染）与第5点是矛盾的，可以根据进入导航的交互体验去取舍。</li></ol><h3 id="组件生命周期及重绘机制"><a href="#组件生命周期及重绘机制" class="headerlink" title="组件生命周期及重绘机制"></a>组件生命周期及重绘机制</h3><p>组件的三种状态及生命周期函数：</p><ol><li>挂载阶段 Mounting<ul><li>componentWillMount：组件挂载之前执行，在render之前调用</li><li>componentDidMount： 组件渲染完成，在所有子组件都render完之后调用</li></ul></li><li>组件变化 Updating<ul><li>componentWillUpdate：组件将要重新渲染</li><li>componentDidUpdate：组件重新渲染完成</li></ul></li><li>卸载阶段 UnMounting<ul><li>componentWillUnmount: 卸载组件</li></ul></li><li><p>两种特殊状态的处理函数</p><ul><li><p>componentWillRecevieProps：组件将要接收新的props时执行</p></li><li><p><strong>shouldComponentUpdate(nextProps, nextState)</strong>：判断组件是否应该重新渲染，默认是true</p><ul><li><strong>setState</strong>执行时，一般会触发组件视图重绘。<ul><li>前后不改变state值 和 无数据交换的父组件的重渲染 的 setState 都会导致组件的重复渲染</li><li><strong>组件的功能细分与dom差异化重绘成本有关</strong>。</li><li>重绘步骤<ol><li>react重新构建虚拟dom树。</li><li>与上一个虚拟dom树对比<a href="https://blog.csdn.net/sexy_squirrel/article/details/79801940" target="_blank" rel="noopener">diff</a>，得出dom结构的差异。</li><li>对发生变化的组件进行重绘。</li></ol></li></ul></li><li><strong>判断setState没有发生变化时，执行return false可阻止不必要的渲染</strong></li><li><strong>Immutable.is()</strong> / <strong>lodash _.isEqual()</strong> 判断复合类型的数据变化</li></ul></li></ul></li></ol><h3 id="复合类型的数据变化比较"><a href="#复合类型的数据变化比较" class="headerlink" title="复合类型的数据变化比较"></a>复合类型的数据变化比较</h3><h4 id="Immutable-is"><a href="#Immutable-is" class="headerlink" title="Immutable.is()"></a>Immutable.is()</h4><ul><li><p>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; is &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"></span><br><span class="line">shouldComponentUpdate: <span class="function">(<span class="params">nextProps = &#123;&#125;, nextState = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> !(<span class="keyword">this</span>.props === nextProps || is(<span class="keyword">this</span>.props, nextProps)) ||</span><br><span class="line">         !(<span class="keyword">this</span>.state === nextState || is(<span class="keyword">this</span>.state, nextState));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>性能<br>Immutable使用Structural Sharing（结构共享）比较的是两个对象的 hashCode 或 valueOf（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 hashCode 相等，值就是一样的。</p><ul><li>减少内存</li><li>避免了深度遍历比较，便于比较复杂数据</li></ul></li></ul><h4 id="lodash-isEqual"><a href="#lodash-isEqual" class="headerlink" title="lodash _.isEqual()"></a>lodash _.isEqual()</h4><ul><li><p>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate (nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_.isEqual(<span class="keyword">this</span>.state, nextState) &amp;&amp; _.isEqual(<span class="keyword">this</span>.props,   nextProps)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>lodash _isEqual() 思路</p><ul><li><p>同数据类型</p><ol><li><p>数组 equalArrays</p><ul><li>数组长度</li><li>set关联</li></ul></li><li><p>对象 equalObject</p><ul><li>key属性名</li><li>value值</li><li>constructor是否相同</li></ul></li><li><p>其他类型 equalByTag</p><ul><li>Buffer</li><li>Boolean、Date、Number，通过+value转化为0、1比较</li><li>error 比较error.name &amp;&amp; error.message</li><li>regExp、string，转化为string比较</li><li>map、set，转化为array，equalArrays</li></ul></li></ol></li><li>不同类型 -&gt; false</li></ul></li><li><p>性能<br>_isEqual 对象层级越深，越耗时</p></li></ul><h3 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h3><ul><li>tree diff<ul><li>dom tree分层级</li><li>稳定dom的结构有利于提高新能，应尽量<strong>减少dom频繁的移除或添加</strong></li></ul></li><li><p>component diff</p><ul><li>同一类型组件<ul><li>v-dom变化 tree diff</li><li>v-dom不变，<strong>使用shouldComponentUpdate判断是否进行重绘</strong>，提高性能</li></ul></li><li>不同类型组件 dirty component，替换整个组件下的子节点</li></ul></li><li><p>element diff</p><ul><li>插入节点、移动节点、移除节点</li><li>同一层级的子节点添加<strong>唯一key值进行区分</strong>，通过key值判断集合中是否存在相同的节点，以此判断对节点的更新：移动或增删，是否可复用元素</li><li><strong>避免大量节点拖拽排序</strong></li></ul></li></ul><p><a href="https://blog.csdn.net/sexy_squirrel/article/details/79801940" target="_blank" rel="noopener">资料</a><br><a href="https://segmentfault.com/a/1190000010686582" target="_blank" rel="noopener">资料2</a></p><h3 id="触发重绘步骤"><a href="#触发重绘步骤" class="headerlink" title="触发重绘步骤"></a>触发重绘步骤</h3><p><img src="/2019/02/16/react-native-性能优化/process.png" alt="触发重绘步骤"></p><p><a href="https://www.w3ctech.com/topic/1595" target="_blank" rel="noopener">资料</a><br><a href="http://react-china.org/t/react-redux-immutablejs/9948" target="_blank" rel="noopener">react+redux+immutablejs</a></p><h2 id="减少新建变量"><a href="#减少新建变量" class="headerlink" title="减少新建变量"></a>减少新建变量</h2><p>事件绑定this</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">handleClick = () =&gt; &#123; // 属性初始化</span><br><span class="line">  console.log('this is:', this);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> // 每次render只执行一次</span><br><span class="line"></span><br><span class="line">handleClick (id, e) &#123;</span><br><span class="line">  console.log('this is:', this); // 若不绑定this,会返回undefined</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.handleClick(id, e)&#125;&gt;btn2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> // 每次渲染都创建新的的箭头函数，可用作事件回调传参，但不建议用作props传入组件中，会带来不必要的渲染</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this,</span> <span class="attr">id</span>)&#125;&gt;</span>btn3<span class="tag">&lt;/<span class="name">button</span>&gt;</span> // 每次render重新执行</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Foo</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> "<span class="attr">red</span>" &#125;&#125;/&gt;</span> // 每一次渲染都被认为 props 发生变化</span><br><span class="line">const fooStyle = &#123; color: "red" &#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">Foo</span> <span class="attr">style</span>=<span class="string">&#123;btnStyle&#125;/</span>&gt;</span> // 同一个引用，props没有发生变化</span><br></pre></td></tr></table></figure><h2 id="组件更新优化"><a href="#组件更新优化" class="headerlink" title="组件更新优化"></a>组件更新优化</h2><ol><li>单个组件更新：避免父节点类型随意更改</li><li>组件列表，key优化：key是唯一且稳定不变的，避免用数组index作为key</li></ol><h2 id="redux性能优化：reselect"><a href="#redux性能优化：reselect" class="headerlink" title="redux性能优化：reselect"></a>redux性能优化：reselect</h2><p>实现原理：只要相关的状态不变，就直接用上一次缓存的结果<br><a href="https://www.jianshu.com/p/6e38c66366cd" target="_blank" rel="noopener">资料</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rn-app更新的realm数据迁移</title>
      <link href="/2019/02/16/realm/"/>
      <url>/2019/02/16/realm/</url>
      
        <content type="html"><![CDATA[<h2 id="realm-数据迁移"><a href="#realm-数据迁移" class="headerlink" title="realm 数据迁移"></a>realm 数据迁移</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> db = <span class="keyword">new</span> Realm(&#123;</span><br><span class="line">    path: <span class="string">'db.realm'</span>,</span><br><span class="line">    schema: tableList, <span class="comment">// 数据表配置</span></span><br><span class="line">    <span class="comment">// 版本号：如果本地表格修改了，可以通过这个参数进行迭代更新</span></span><br><span class="line">    schemaVersion: <span class="number">2</span>, </span><br><span class="line">    migration: <span class="function">(<span class="params">oldRealm, newRealm</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldRealm.schemaVersion &lt; <span class="number">2</span>) &#123; <span class="comment">// 数据表迁移内容，与新版本兼容</span></span><br><span class="line">            Util.devLog(<span class="string">'migration realm'</span>)</span><br><span class="line">            <span class="keyword">let</span> oldObj = oldRealm.objects(<span class="string">'recentGame'</span>)</span><br><span class="line">            <span class="keyword">let</span> newObj = newRealm.objects(<span class="string">'recentGame'</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oldObj.length; i++) &#123;</span><br><span class="line">                newObj[i].id = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="realm-本地储存操作"><a href="#realm-本地储存操作" class="headerlink" title="realm 本地储存操作"></a>realm 本地储存操作</h2><p><a href="https://segmentfault.com/a/1190000011841439" target="_blank" rel="noopener">使用教程</a></p><p><a href="https://realm.io/cn/blog/" target="_blank" rel="noopener">api</a><br><a href="https://realm.io/cn/blog/first-object-database-realm-node-js-server/" target="_blank" rel="noopener">api</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native常用基础布局总结</title>
      <link href="/2019/02/16/react-native-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/02/16/react-native-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="多个style"><a href="#多个style" class="headerlink" title="多个style"></a>多个style</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style=&#123;[styles.style1, styles.style2]&#125;</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件之间的属性-事件传递"><a href="#组件之间的属性-事件传递" class="headerlink" title="组件之间的属性/事件传递"></a>组件之间的属性/事件传递</h3><ul><li>父子组件<ul><li>porps <a href="http://blog.csdn.net/p106786860/article/details/52408875" target="_blank" rel="noopener">http://blog.csdn.net/p106786860/article/details/52408875</a> </li></ul></li><li>兄弟组件事件传递<ul><li>DeviceEventEmitter <a href="http://blog.csdn.net/slowlifes/article/details/75330862" target="_blank" rel="noopener">http://blog.csdn.net/slowlifes/article/details/75330862</a> </li></ul></li></ul><h3 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h3><p><a href="http://wiki.jikexueyuan.com/project/react-native-lesson/five-ui-unit.html" target="_blank" rel="noopener">api</a><br><a href="https://segmentfault.com/a/1190000008933870#articleHeader1" target="_blank" rel="noopener">常用组件</a></p><ul><li><p>FlatList 列表</p><ul><li>自带滚动 scrollView，设置上下间距无效，需要设置到子元素的view</li><li>contentContainerStyle 样式应用到内层容器</li><li>onRefresh 需要 与 refreshing 共用</li><li>onScroll<ul><li>event参数 </li><li>event.nativeEvent.contentOffsetY 滚动垂直距离 </li><li>event.nativeEvent.layoutMeasurement.height 滚动内容高度</li></ul></li><li>numColumns={3} 三列、横行排列</li><li>horizonal={true} 始终横向排列，超出范围横向滚动</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;FlatList</span><br><span class="line">        data=&#123;<span class="keyword">this</span>.state.userList&#125;</span><br><span class="line">        keyExtractor=&#123;<span class="keyword">this</span>.keyExtractor&#125;</span><br><span class="line">        renderItem=&#123;<span class="keyword">this</span>.renderItem&#125;</span><br><span class="line">        style=&#123;styles.container&#125;</span><br><span class="line">        numColumns=&#123;<span class="number">3</span>&#125;</span><br><span class="line">      /&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><ul><li><a href="http://blog.csdn.net/u011272795/article/details/73824558" target="_blank" rel="noopener">屏幕尺寸与大小适配</a></li><li>px转化为dp <a href="https://www.jianshu.com/p/fd40b448a9e3" target="_blank" rel="noopener">rn单位问题换算</a></li></ul><p>ppi<br>像素密度 ppi / 160<br>dp 与 px 的关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dp = px / (ppi / <span class="number">160</span>)</span><br><span class="line">px = dp * ppi / <span class="number">160</span></span><br><span class="line"></span><br><span class="line">dp = px / PixelRatio.get()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计稿</span></span><br><span class="line"><span class="comment">// 4.7英寸，分辨率1136*640，那么像素密度是：√（1136^2+640^2）=1303.87</span></span><br><span class="line"><span class="comment">// 1303.87/4.7≈277ppi</span></span><br><span class="line"><span class="comment">// 像素密度 = 277 / 160 = 1.73</span></span><br></pre></td></tr></table></figure><p>[app 设计详细]<a href="http://www.25xt.com/appdesign/8862.html" target="_blank" rel="noopener">http://www.25xt.com/appdesign/8862.html</a></p><h2 id="手势、点击穿透"><a href="#手势、点击穿透" class="headerlink" title="手势、点击穿透"></a>手势、点击穿透</h2><p>pointerEvent 控制组件与子组件之间的触摸关系</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul><li>网络图片需要预设一个固定宽高，否则大小为0</li><li><p>gif图支持<br>android/app/build_gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies</span><br><span class="line">// For animated GIF support</span><br><span class="line">compile &apos;com.facebook.fresco:animated-gif:0.13.0&apos;</span><br></pre></td></tr></table></figure></li><li><p>圆角图片溢出（有锯齿）<br>  overflow: ‘hidden’安卓中无效，子级元素会溢出<br>  <a href="https://reactnative.cn/docs/0.39/known-issues.html" target="_blank" rel="noopener">防止圆角图片溢出</a>：<image>添加父级View作溢出处理（父级为设置了borderRadius的View）</image></p></li></ul><h2 id="zIndex"><a href="#zIndex" class="headerlink" title="zIndex"></a>zIndex</h2><p>opacity属性会影响溢出显示的元素的层次顺序，因此可以用在子元素上<br>zIndex不一定有效，最好是通过元素顺序来控制层次</p><h2 id="滚动事件"><a href="#滚动事件" class="headerlink" title="滚动事件"></a>滚动事件</h2><ul><li>onScrollBeginDrag</li><li>onScrollEndDrag</li><li>onMomentumScrollBegin</li><li>onMomentumScrollEnd</li><li>onScroll</li></ul><h2 id="滚动导航置顶"><a href="#滚动导航置顶" class="headerlink" title="滚动导航置顶"></a>滚动导航置顶</h2><ul><li>滚动列表的高度需要固定（置顶前高度=屏幕高度），否则会因为导航置顶，滚动内容高度变化造成闪烁</li><li>动画，interpolate 插值</li></ul><h2 id="点击涟漪反馈"><a href="#点击涟漪反馈" class="headerlink" title="点击涟漪反馈"></a>点击涟漪反馈</h2><ul><li>支持android api 21+</li><li><a href="http://bbs.reactnative.cn/topic/41/mrn-%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Ereact-native%E7%9A%84material-design%E9%A3%8E%E6%A0%BC%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93" target="_blank" rel="noopener">MRN</a> 基于React Native的Material Design风格的组件库 支持android api 16+ </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;TouchableNativeFeedback</span><br><span class="line">background=&#123; (Platform.OS === &apos;android&apos; &amp;&amp; Platform.Version &gt;= 21) ? TouchableNativeFeedback.Ripple(&apos;#ccc&apos;, false) : null &#125; // 满足安卓平台及api 21+</span><br><span class="line">onPressOut=&#123;this.onPressEvent.bind(this, item)&#125; delayPressOut=&#123;100&#125;&gt; // 点击先执行涟漪动画，再执行press事件，防止事件响应过不显示涟漪动画</span><br><span class="line">&lt;/TouchableNativeFeedback&gt;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p><a href="https://www.jianshu.com/p/a8b965ad258f" target="_blank" rel="noopener">教程</a><br>loop动画在组件销毁前最好先stop</p><h2 id="字体过长处理"><a href="#字体过长处理" class="headerlink" title="字体过长处理"></a>字体过长处理</h2><p>ellipsizeMode=’tail’ numberOfLines={1}</p><h2 id="用ts编写rn"><a href="#用ts编写rn" class="headerlink" title="用ts编写rn"></a>用ts编写rn</h2><p><a href="https://reactnative.cn/post/4483" target="_blank" rel="noopener">教程</a></p><p>参考：<br><a href="http://www.cocoachina.com/ios/20150420/11608.html" target="_blank" rel="noopener">布局篇详解</a><br><a href="https://segmentfault.com/a/1190000004031633" target="_blank" rel="noopener">样式使用与 flexbox</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native热更新与打包发布</title>
      <link href="/2019/02/16/react-native-%E7%83%AD%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%8F%91%E5%B8%83/"/>
      <url>/2019/02/16/react-native-%E7%83%AD%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/02/16/react-native-热更新与发布/process.png" alt="热更新流程图"></p><h3 id="打包配置确认流程"><a href="#打包配置确认流程" class="headerlink" title="打包配置确认流程"></a>打包配置确认流程</h3><ol><li><p>config.js版本号 与 环境</p><ol><li>bundleMinVersion + 1</li><li>测试环境release包 与 正式环境release包 对应环境域名</li></ol></li><li><p>配置热更新服务器环境，区分环境，nativeConfig.js -&gt;<br>buildConfig.DEBUG ? “http://<strong>**</strong>-test.com:3000” : “http://<strong>**</strong>-pro.com:3000”</p></li><li><p>热更新服务器登录切换 code-push whoami<br>测试环境 http://<strong>**</strong>-test.com:3000<br>正式环境 http://<strong>**</strong>-pro.com:3000</p></li></ol><h3 id="run-android发布"><a href="#run-android发布" class="headerlink" title="run-android发布"></a>run-android发布</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android // debug包 </span><br><span class="line">react-native run-android --variant=release // release包</span><br></pre></td></tr></table></figure><h3 id="生成bundle包"><a href="#生成bundle包" class="headerlink" title="生成bundle包"></a>生成bundle包</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --platform android --entry-file index.js --bundle-output ./bundles/index.android.bundle --assets-dest ./bundles --dev false</span><br><span class="line"></span><br><span class="line">// 解释</span><br><span class="line">react-native bundle</span><br><span class="line">--platform android            // 平台</span><br><span class="line">--entry-file index.js         //启动文件</span><br><span class="line">--bundle-output ./bundles/index.android.bundle // 打包js输出文件</span><br><span class="line">--assets-dest ./bundles       // 资源输出目录</span><br><span class="line">--dev true                    // 是否调试模式</span><br></pre></td></tr></table></figure><ol start="3"><li>调试环境 –dev true；正式环境 –dev false</li></ol><h3 id="提交bundle包到code-push，发布更新"><a href="#提交bundle包到code-push，发布更新" class="headerlink" title="提交bundle包到code-push，发布更新"></a>提交bundle包到code-push，发布更新</h3><ol><li><p>获取登录的token<br>http://<strong>**</strong>-test.com:3000<br>用户名：admin<br>密码：<strong>**</strong></p></li><li><p>登录到code-push-server</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push login http://******-test.com:3000</span><br></pre></td></tr></table></figure></li></ol><p>token 复制 1）中获取的 token</p><ol start="3"><li>code-push相关命令<br>查看 app<br>code-push app ls<br>查看 Deployment Key</li></ol><p>code-push deployment ls 组局游戏-android -k</p><ol start="4"><li>执行code-push release命令</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">code-push release "组局游戏-android" ./bundles/ <span class="number">0</span>.<span class="number">0</span>.<span class="number">3</span> --deploymentName Production --description "version=<span class="number">8</span>" --mandatory false</span><br><span class="line"></span><br><span class="line">// 解释</span><br><span class="line">code-push release</span><br><span class="line">"组局游戏-android"                // &lt;应用名称&gt;</span><br><span class="line">./bundles/                       // &lt;bundle所在目录&gt;</span><br><span class="line"><span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>                            // &lt;对应版本&gt;</span><br><span class="line">--deploymentName Staging         // 更新环境 Staging 测试环境 Production 正式环境</span><br><span class="line">--description "<span class="keyword">For</span> test bundle_version=<span class="number">3</span>" // 更新描述</span><br><span class="line">--mandatory false                //是否强制更新</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code-push history deployment "组局游戏-android" Production // 查看历史版本</span><br><span class="line">code-push deployment clear "组局游戏-android" Production // 清除版本</span><br></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/sinat_17775997/article/details/69364463" target="_blank" rel="noopener">参考</a></p><h3 id="混淆代码"><a href="#混淆代码" class="headerlink" title="混淆代码"></a>混淆代码</h3><p>启用Proguard代码混淆来缩小APK文件的大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def enableProguardInReleaseBuilds = <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p><a href="https://reactnative.cn/docs/0.51/signed-apk-android.html#content" target="_blank" rel="noopener">api</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react-native实现多台真机调试</title>
      <link href="/2019/02/16/react-native-%E8%B0%83%E8%AF%95/"/>
      <url>/2019/02/16/react-native-%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><p><a href="https://reactnative.cn/docs/0.51/debugging.html" target="_blank" rel="noopener">react-devtools</a><br>与 模拟器中ctrl+m 的 toggle inspector 结合使用，可以调试元素的 props、state、style</p><h2 id="多台真机调试"><a href="#多台真机调试" class="headerlink" title="多台真机调试"></a>多台真机调试</h2><ol><li><p>有线</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android // 有线连接一台设备，并输出</span><br><span class="line">// 或</span><br><span class="line">adb logcat *:S ReactNative:V ReactNativeJS:V</span><br><span class="line"></span><br><span class="line">adb devices // 输出设备列表，有线连接多台设备，并指定设备号输出log</span><br><span class="line">adb -s ca759657 logcat -v threadtime *:S ReactNative:V ReactNativeJS:V</span><br><span class="line">adb -s e5a56695 logcat -v threadtime  *:S ReactNative:V ReactNativeJS:V</span><br></pre></td></tr></table></figure></li><li><p>无线<br>install apk<br>Dev Settings -&gt; Debug server host &amp; post for device -&gt; 本机ip:8081（同一局域网）</p></li></ol><h3 id="log打印"><a href="#log打印" class="headerlink" title="log打印"></a>log打印</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">react-native log-android（相当于adb logcat，用于有线连接）</span><br><span class="line">adb logcat *:S ReactNative:V ReactNativeJS:V</span><br></pre></td></tr></table></figure><p>指定设备输出log：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb -s ca759657 logcat -v threadtime *:S ReactNative:V ReactNativeJS:V</span><br><span class="line">adb -s e5a56695 logcat -v threadtime  *:S ReactNative:V ReactNativeJS:V</span><br></pre></td></tr></table></figure></p><p>chrome控制台调试：Dev Settings -&gt; Debug js remotely （同一局域网内可无线连接）<br>热加载：Dev Settings -&gt; Enable Live Reloading, Enable Hot Reloading</p><p><a href="https://blog.csdn.net/quanqinyang/article/details/52215652" target="_blank" rel="noopener">参考</a></p><h3 id="防止控制台输出中文乱码"><a href="#防止控制台输出中文乱码" class="headerlink" title="防止控制台输出中文乱码"></a>防止控制台输出中文乱码</h3><p>  乱码原因：Android中使用的是UTF-8字符，而CMD默认字符集是ANSI，中文环境下即为GBK。</p><ol><li><p>查看当前编码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chcp</span></span><br><span class="line">// Active code page: <span class="number">936</span></span><br></pre></td></tr></table></figure></li><li><p>更改代码页</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span></span><br><span class="line">// Active code page: <span class="number">65001</span></span><br></pre></td></tr></table></figure></li><li><p>更改字体设置<br>cmd.exe 右键 -&gt; 属性 -&gt; 字体<br>把字体从点阵字体更改为”Lucida Console”字体<br>大小调到14 </p></li></ol><p><a href="https://blog.csdn.net/lqxandroid2012/article/details/48001931" target="_blank" rel="noopener">参考1</a><br><a href="https://blog.csdn.net/fucun1984686003/article/details/49203937" target="_blank" rel="noopener">参考2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native运行的build_gradle配置</title>
      <link href="/2019/02/16/build-gradle-%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/02/16/build-gradle-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span><span class="comment">//说明module的类型，com.android.application为程序，com.android.library为库</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">22</span><span class="comment">//编译的SDK版本</span></span><br><span class="line">    buildToolsVersion <span class="string">"22.0.1"</span><span class="comment">//编译的Tools版本</span></span><br><span class="line">    defaultConfig &#123;<span class="comment">//默认配置</span></span><br><span class="line">        applicationId <span class="string">"com.nd.famlink"</span><span class="comment">//应用程序的包名</span></span><br><span class="line">        minSdkVersion <span class="number">8</span><span class="comment">//支持的最低版本</span></span><br><span class="line">        targetSdkVersion <span class="number">19</span><span class="comment">//支持的目标版本</span></span><br><span class="line">        versionCode <span class="number">52</span><span class="comment">//版本号</span></span><br><span class="line">        versionName <span class="string">"3.0.1"</span><span class="comment">//版本名</span></span><br><span class="line">    &#125;</span><br><span class="line">    sourceSets &#123;<span class="comment">//目录指向配置</span></span><br><span class="line">        main &#123;</span><br><span class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span><span class="comment">//指定AndroidManifest文件</span></span><br><span class="line">            java.srcDirs = [<span class="string">'src'</span>]<span class="comment">//指定source目录</span></span><br><span class="line">            resources.srcDirs = [<span class="string">'src'</span>]<span class="comment">//指定source目录</span></span><br><span class="line">            aidl.srcDirs = [<span class="string">'src'</span>]<span class="comment">//指定source目录</span></span><br><span class="line">            renderscript.srcDirs = [<span class="string">'src'</span>]<span class="comment">//指定source目录</span></span><br><span class="line">            res.srcDirs = [<span class="string">'res'</span>]<span class="comment">//指定资源目录</span></span><br><span class="line">            assets.srcDirs = [<span class="string">'assets'</span>]<span class="comment">//指定assets目录</span></span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]<span class="comment">//指定lib库目录</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug.setRoot(<span class="string">'build-types/debug'</span>)<span class="comment">//指定debug模式的路径</span></span><br><span class="line">        release.setRoot(<span class="string">'build-types/release'</span>)<span class="comment">//指定release模式的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    signingConfigs &#123;<span class="comment">//签名配置</span></span><br><span class="line">        release &#123;<span class="comment">//发布版签名配置</span></span><br><span class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"fk.keystore"</span>)</span><span class="comment">//密钥文件路径</span></span></span><br><span class="line"><span class="function">            storePassword "123"<span class="comment">//密钥文件密码</span></span></span><br><span class="line"><span class="function">            keyAlias "fk"<span class="comment">//key别名</span></span></span><br><span class="line"><span class="function">            keyPassword "123"<span class="comment">//key密码</span></span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">        debug </span>&#123;<span class="comment">//debug版签名配置</span></span><br><span class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"fk.keystore"</span>)</span></span></span><br><span class="line"><span class="function">            storePassword "123"</span></span><br><span class="line"><span class="function">            keyAlias "fk"</span></span><br><span class="line"><span class="function">            keyPassword "123"</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    buildTypes </span>&#123;<span class="comment">//build类型</span></span><br><span class="line">        release &#123;<span class="comment">//发布</span></span><br><span class="line">            minifyEnabled <span class="keyword">true</span><span class="comment">//混淆开启</span></span><br><span class="line">            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-project.txt'<span class="comment">//指定混淆规则文件</span></span></span><br><span class="line"><span class="function">            signingConfig signingConfigs.release<span class="comment">//设置签名信息</span></span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">        debug </span>&#123;<span class="comment">//调试</span></span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">        exclude <span class="string">'META-INF/ASL2.0'</span></span><br><span class="line">        exclude <span class="string">'META-INF/LICENSE'</span></span><br><span class="line">        exclude <span class="string">'META-INF/NOTICE'</span></span><br><span class="line">        exclude <span class="string">'META-INF/MANIFEST.MF'</span></span><br><span class="line">    &#125;</span><br><span class="line">    lintOptions &#123;</span><br><span class="line">          abortOnError <span class="keyword">false</span><span class="comment">//lint时候终止错误上报,防止编译的时候莫名的失败</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">      <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, exclude: [<span class="string">'android-support*.jar'</span>], include: [<span class="string">'*.jar'</span>])</span>   <span class="comment">//编译lib目录下的.jar文件</span></span></span><br><span class="line"><span class="function">      compile <span class="title">project</span><span class="params">(<span class="string">':Easylink'</span>)</span><span class="comment">//编译附加的项目</span></span></span><br><span class="line"><span class="function">      compile <span class="title">project</span><span class="params">(<span class="string">':ImageLibrary'</span>)</span></span></span><br><span class="line"><span class="function">      compile <span class="title">project</span><span class="params">(<span class="string">':ImageResLibrary'</span>)</span></span></span><br><span class="line"><span class="function">      compile <span class="title">project</span><span class="params">(<span class="string">':Ofdmtransport'</span>)</span></span></span><br><span class="line"><span class="function">      compile <span class="title">project</span><span class="params">(<span class="string">':PullToRefreshLibrary'</span>)</span></span></span><br><span class="line"><span class="function">      compile <span class="title">project</span><span class="params">(<span class="string">':RecorderLibrary'</span>)</span></span></span><br><span class="line"><span class="function">      compile <span class="title">project</span><span class="params">(<span class="string">':WebSocket'</span>)</span></span></span><br><span class="line"><span class="function">      compile <span class="title">project</span><span class="params">(<span class="string">':WidgetLibrary'</span>)</span></span></span><br><span class="line"><span class="function">      compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'<span class="comment">//编译来自Jcenter的第三方开源库</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000004229002" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native运行步骤及记录一些坑</title>
      <link href="/2019/02/16/react-native-%E8%BF%90%E8%A1%8C/"/>
      <url>/2019/02/16/react-native-%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="build-gradle-配置"><a href="#build-gradle-配置" class="headerlink" title="build.gradle 配置"></a>build.gradle 配置</h2><p>android/app/build.gradle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">android &#123;  <span class="comment">// 对应版本</span></span><br><span class="line">  compileSdkVersion <span class="number">24</span></span><br><span class="line">  buildToolsVersion <span class="string">"24.0.2"</span> </span><br><span class="line">  <span class="comment">// D:\Windows\Android\sdk\build-tools // 查看版本</span></span><br><span class="line"></span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    applicationId <span class="string">"com.awesomeproject"</span></span><br><span class="line">    minSdkVersion <span class="number">16</span></span><br><span class="line">    targetSdkVersion <span class="number">24</span></span><br><span class="line">    versionCode <span class="number">1</span></span><br><span class="line">    versionName <span class="string">"1.0"</span></span><br><span class="line">    ndk &#123;</span><br><span class="line">        abiFilters <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">"libs"</span>, include: [<span class="string">"*.jar"</span>])</span></span></span><br><span class="line"><span class="function">    compile "com.android.support:appcompat-v7:24.2.1" </span></span><br><span class="line"><span class="function">  <span class="comment">// D:/Windows/Android/sdk/extras/android/m2repository/com/android/support/appcompat-v7/</span></span></span><br><span class="line"><span class="function">    compile "com.facebook.react:react-<span class="keyword">native</span>:+"</span></span><br><span class="line"><span class="function">  <span class="comment">// From node_modules</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>真机运行 【推荐】<ul><li>与虚拟器中运行的兼容性不同，以真机为准</li><li>adb<ul><li>adb devices 检测真机是否连接成功</li><li>adb shell input keyevent 82 调起任务栏</li></ul></li></ul></li><li><p>或 虚拟器运行</p><ul><li>Genymotion 【推荐】<ul><li>偶尔启动失败问题：升级VirtualBox版本</li></ul></li><li>自带的 Android Device Emulator（配置比较多坑）</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb devices // 打印设备列表，确保设备已连接</span><br><span class="line">npm install // 添加包含原生代码的库</span><br><span class="line">react-native link // 根据package.json中的依赖链接原生库</span><br><span class="line">react-native run-android // 运行项目</span><br></pre></td></tr></table></figure></li></ul><h2 id="运行中遇到的坑"><a href="#运行中遇到的坑" class="headerlink" title="运行中遇到的坑"></a>运行中遇到的坑</h2><h3 id="版本报错：build-gradle对应版本-依赖库中的最低版本依赖"><a href="#版本报错：build-gradle对应版本-依赖库中的最低版本依赖" class="headerlink" title="版本报错：build_gradle对应版本 / 依赖库中的最低版本依赖"></a>版本报错：build_gradle对应版本 / 依赖库中的最低版本依赖</h3><p>  <img src="/2019/02/16/react-native-运行/error1.png" alt></p><p>  解决：<br>  升级到依赖库中的最低版本，并确保sdk版本已安装</p><h3 id="连接设备报错"><a href="#连接设备报错" class="headerlink" title="连接设备报错"></a>连接设备报错</h3><h4 id="could-not-get-BatchedBridge"><a href="#could-not-get-BatchedBridge" class="headerlink" title="could not get BatchedBridge"></a>could not get BatchedBridge</h4>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could <span class="keyword">not</span> get BatchedBridge, make sure your bundle is packaged correctly</span><br></pre></td></tr></table></figure><p>  解决：</p>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb devices // 输出设备列表，模拟器</span><br><span class="line">adb reverse tcp:<span class="number">8081</span> tcp:<span class="number">8081</span></span><br></pre></td></tr></table></figure><p>  真机设置<br>  dev setting -&gt; debug server host for device -&gt; localhost:8081</p><p>  <img src="/2019/02/16/react-native-运行/setting.png" alt></p><h4 id="fbBatchedBridge-is-undefined"><a href="#fbBatchedBridge-is-undefined" class="headerlink" title="fbBatchedBridge is undefined"></a>fbBatchedBridge is undefined</h4>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed to <span class="keyword">call</span> funciton, __fbBatchedBridge is undefined</span><br></pre></td></tr></table></figure><p>  解决：<br>  保证电脑和app启动在同一个局域网下，指定本机ip地址和端口号</p>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 项目根目录，--host为本机ip地址</span><br><span class="line">react-native <span class="built_in">start</span> --host <span class="number">10</span>.<span class="number">1</span>.<span class="number">102</span>.<span class="number">80</span> --port <span class="number">8081</span></span><br><span class="line"></span><br><span class="line">// 另一个控制台</span><br><span class="line">react-native run-android</span><br></pre></td></tr></table></figure><h3 id="模块安装报错：can’t-delete-create-path"><a href="#模块安装报错：can’t-delete-create-path" class="headerlink" title="模块安装报错：can’t delete / create path"></a>模块安装报错：can’t delete / create path</h3>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Error: <span class="title">Cannot</span> <span class="title">create</span> <span class="title">directory</span> <span class="title">E</span>:\<span class="title">react</span>-<span class="title">native</span>-<span class="title">JueJinClient</span>-<span class="title">master1</span>\<span class="title">android</span>\<span class="title">app</span>\<span class="title">build</span>\<span class="title">intermediates</span>\<span class="title">merged.dir</span>\<span class="title">values</span></span></span><br></pre></td></tr></table></figure><p>  解决：</p>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> android &amp;&amp; gradlew clean</span><br></pre></td></tr></table></figure><h3 id="依赖库版本报错：min-sdk-version-gt-26"><a href="#依赖库版本报错：min-sdk-version-gt-26" class="headerlink" title="依赖库版本报错：min-sdk-version&gt;=26"></a>依赖库版本报错：min-sdk-version&gt;=26</h3><p>  <img src="/2019/02/16/react-native-运行/error2.png" alt></p><p>  解决：</p><p>  <img src="/2019/02/16/react-native-运行/error3.png" alt><br>  <a href="https://github.com/airbnb/lottie-react-native/issues/345" target="_blank" rel="noopener">lottie-react-native</a></p><h3 id="应用方法数报错"><a href="#应用方法数报错" class="headerlink" title="应用方法数报错"></a>应用方法数报错</h3><p>  <img src="/2019/02/16/react-native-运行/error4.png" alt></p><ol><li><p>build.gradle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">        defaultConfig &#123;</span><br><span class="line">          multiDexEnabled = <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">        compile <span class="string">'com.android.support:multidex:1.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import android.support.multidex.MultiDexApplication;</span><br><span class="line"></span><br><span class="line">public class MainApplication extends MultiDexApplication implements ReactApplication</span><br></pre></td></tr></table></figure></li></ol><h3 id="混淆报错：release-报错-proguard"><a href="#混淆报错：release-报错-proguard" class="headerlink" title="混淆报错：release 报错 proguard"></a>混淆报错：release 报错 proguard</h3>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unable to process incoming event 'ProcessComplete' &lt;ProgressCompleteEvent&gt;</span><br></pre></td></tr></table></figure><p>  解决：<br>    <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> android &amp;&amp; gradlew.bat assembleRelease --console plain // 查找原因</span><br></pre></td></tr></table></figure></p><p>  思路：</p><ol><li><p>新功能单独打包，排查是否是库文件混淆问题。<br>是，则查找库文件相关的混淆规则；<br>否，则查看项目源码中更改的地方，并加上相应的混淆规则。</p></li><li><p>相关库是否需要加上混淆的规则 <a href="https://github.com/oney/react-native-webrtc/issues/230" target="_blank" rel="noopener">如在库的github中查找</a></p></li><li><p>用android studio打包，可以查看具体出错的类</p><p><img src="/2019/02/16/react-native-运行/error5.png" alt><br><img src="/2019/02/16/react-native-运行/error6.png" alt></p></li><li><p>添加规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># react-native-webrtc</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">webrtc</span>.** </span>&#123;*;&#125;</span><br><span class="line">-dontwarn org.webrtc.**</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">chromium</span>.** </span>&#123;*;&#125;</span><br><span class="line">-dontwarn org.chromium.**</span><br></pre></td></tr></table></figure></li><li><p>如果还是报错，尝试提高库文件的sdk版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">        compileSdkVersion <span class="number">26</span></span><br><span class="line">        buildToolsVersion <span class="string">"26.0.3"</span></span><br><span class="line"></span><br><span class="line">        defaultConfig &#123;</span><br><span class="line">          minSdkVersion <span class="number">16</span></span><br><span class="line">          targetSdkVersion <span class="number">23</span></span><br><span class="line">          versionCode <span class="number">1</span></span><br><span class="line">          versionName <span class="string">"1.0"</span></span><br><span class="line">          ndk &#123;</span><br><span class="line">            abiFilters <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Chrome调试报错"><a href="#Chrome调试报错" class="headerlink" title="Chrome调试报错"></a>Chrome调试报错</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    Attempted to transition from state `RESPONDER_INACTIVE_PRESS_IN` to `RESPONDER_ACTIVE_LONG_PRESS_IN`, which is <span class="keyword">not</span> supported. This is most likely due to `Touchable.longPressDelayTimeout` <span class="keyword">not</span> being cancelled</span><br></pre></td></tr></table></figure><p>解决：<br>开启Debug JS Remotely模式下chrome调试，使用TouchableHighlight会出现以上报错，建议关闭Chrome调试或重启apk</p><h3 id="build时间比较长的问题"><a href="#build时间比较长的问题" class="headerlink" title="build时间比较长的问题"></a>build时间比较长的问题</h3><p>  原因：依赖的库的云下载时间长</p><ol><li>build一次后，android/app/build 生成，第一次生成build的时间会比较长</li><li>再次执行build前，删除以下文件夹<br>android\app\build\generated<br>android\app\build\intermediates\classes<br>android\app\build\intermediates\incremental</li><li>如果报错 can’t delete node_modules其他库的build子文件夹，执行 cd android &amp;&amp; gradlew clean</li></ol><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> android &amp;&amp; gradlew clean // 清除所有的构建任务的output，包含apk文件</span><br><span class="line">gradlew check // 执行Lint检查并且能够在Lint检测到错误后停止运行</span><br><span class="line">gradlew build // 执行assemble和check</span><br><span class="line">gradlew connectedCheck // 在测试机上执行所有测试任务</span><br><span class="line">gradlew deviceCheck // 执行所有在远程设备上的测试任务</span><br><span class="line">gradlew installDebug</span><br><span class="line">gradlew installRelease // 在设备上安装一个Debug/Release版本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native安装与环境搭建</title>
      <link href="/2019/02/16/react-native-%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/02/16/react-native-%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="安装前"><a href="#安装前" class="headerlink" title="安装前"></a>安装前</h2><blockquote><p><strong>注意：不要使用 cnpm！<br>cnpm 安装的模块路径比较奇怪，packager 不能正常识别！</strong></p></blockquote><h2 id="Python-2"><a href="#Python-2" class="headerlink" title="Python 2"></a>Python 2</h2><ol><li><p>打开 <code>PowerShell</code> 窗口</p><ul><li>win+r -&gt; PowerShell -&gt; enter</li></ul></li><li><p>安装 <code>chocolatey</code>，并设置环境变量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@powershell -NoProfile -ExecutionPolicy Bypass -Command "iex ((new-object <span class="built_in">net</span>.webclient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; <span class="built_in">SET</span> <span class="built_in">PATH</span>=<span class="variable">%PATH%</span>;<span class="variable">%ALLUSERSPROFILE%</span>\chocolatey\bin</span><br></pre></td></tr></table></figure></li><li><p>安装 <code>python2</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install python2#main</span><br></pre></td></tr></table></figure></li></ol><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ol><li>安装 <ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">jdk-8u101-windows-x64</a></li><li>或 choco install jdk8</li></ul></li><li>设置环境变量<ul><li><code>JAVE_HOME</code><ul><li>E:\Program Files\Java\jdk1.8.0_101</li></ul></li><li><code>CLASSPATH</code><ul><li>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</li></ul></li><li><code>PATH</code><ul><li>%JAVA_HOME%\bin</li></ul></li></ul></li></ol><h2 id="android-studio"><a href="#android-studio" class="headerlink" title="android studio"></a>android studio</h2><ol><li><p>安装选择</p><ul><li>Android Support Repository</li><li>Android SDK</li><li>Android Device Emulator 模拟器（配置较多，推荐Genymotion）</li><li>HAXM加速驱动</li></ul></li><li><p>环境变量</p><ul><li><code>ANDROID_HOME</code><ul><li>D:\Windows\Android\sdk</li></ul></li><li><code>PATH</code><ul><li>D:\software\AndroidSdk\tools\;D:\software\AndroidSdk\platform-tools\;</li><li>Android SDK的tools目录，以便在终端运行一些android工具：android avd、adb logcat 等</li></ul></li></ul></li></ol><h2 id="react-native-cli"><a href="#react-native-cli" class="headerlink" title="react-native-cli"></a>react-native-cli</h2><ol><li><p>全局安装 rn 脚架</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli react-native</span><br></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init AwesomeProject</span><br></pre></td></tr></table></figure></li></ol><h2 id="推荐安装"><a href="#推荐安装" class="headerlink" title="推荐安装"></a>推荐安装</h2><ol><li>模拟器工具<br> Genymotion</li><li>提高编译速度<br> Gradle Daemon安装<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> "<span class="variable">%USERPROFILE%</span>/.gradle" <span class="built_in">mkdir</span> "<span class="variable">%USERPROFILE%</span>/.gradle") &amp;&amp; (<span class="built_in">echo</span> org.gradle.daemon=true &gt;&gt; "<span class="variable">%USERPROFILE%</span>/.gradle/gradle.properties")</span><br></pre></td></tr></table></figure></li></ol><p>ps: <a href="https://reactnative.cn/docs/getting-started.html" target="_blank" rel="noopener">api</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react基础</title>
      <link href="/2019/02/16/react-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/02/16/react-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><ul><li><p>在react中使用jsx来 描述用户界面</p></li><li><p>jsx中的表达式 {}</p></li><li><p>在语句中使用jsx</p></li><li><p>属性 “”</p></li><li><p>属性表达式 {}</p></li><li><p>防xss攻击</p></li></ul><h2 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h2><ul><li>元素，react应用的最小单位</li><li>ReactDOM.render() 更新元素：只更新改变的部分</li></ul><h2 id="组件和props"><a href="#组件和props" class="headerlink" title="组件和props"></a>组件和props</h2><ul><li>组件定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6 class 定义 react 组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或 函数定义 react 组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组件渲染</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件渲染</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Sara"</span> /&gt;</span>; // 组件名称首字母大写</span></span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>组件名称首字母大写</li><li>组件的返回值只能有一个根元素</li></ul></li></ul><h2 id="state-和-生命周期"><a href="#state-和-生命周期" class="headerlink" title="state 和 生命周期"></a>state 和 生命周期</h2><ul><li>组件更新 -&gt; 添加状态</li><li><p>函数转变为类 -&gt; 添加局部状态、生命周期钩子</p></li><li><p>属性转变为 局部状态：</p><ul><li>this.props.date -&gt; this.state.date</li><li>类构造函数 this.state</li><li>传递props到基础构造函数</li></ul></li><li><p>生命周期方法添加到类：</p><ul><li>组件第一次加载到dom，挂载 componentDidMount</li><li>组件生成的dom被移除，卸载 componentWillUnmount</li></ul></li><li><p>状态更新，位于事件处理器中的setState是异步的</p></li><li>redux 状态管理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">preState, props</span>) =&gt;</span> &#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.state.counter + props.increment <span class="comment">// 属性中的增量</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在事件循环中，状态更新合并</li></ul><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><ul><li>添加监听器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onClick = &#123;handleClick&#125;</span><br></pre></td></tr></table></figure><ul><li>preventDefault 阻止默认行为</li><li>react事件绑定this<ul><li>构造函数中绑定this（官方推荐，只会生成一次实例）</li><li>使用属性初始化器语法</li><li>在调用时使用箭头函数绑定this</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数中绑定this</span></span><br><span class="line">consructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">handleClick () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this'</span>, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">  Click me</span><br><span class="line">&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 属性初始化器语法，es6</span></span><br><span class="line"><span class="regexp">handleClick = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    console.log(this);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 在添加监听器的 回调函数中 使用箭头函数（如果回调函数作为一个属性值传入低阶组件，组件可能会进行额外的重新渲染，建议用1、2）</span></span><br><span class="line"><span class="regexp">handleClick () &#123;</span></span><br><span class="line"><span class="regexp">    console.log(this)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">render () &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;(e) =&gt; this.handleClick(e)&#125;&gt;</span></span><br><span class="line"><span class="regexp">            click</span></span><br><span class="line"><span class="regexp">        &lt;button&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>react事件传参，会造成额外渲染</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.deleteRow(id, e)&#125;&gt;Delete Row<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--deleteRow(id, e) 事件对象e放后面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.deleteRow.bind(this,</span> <span class="attr">id</span>)&#125;&gt;</span>Delete Row<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><ul><li>if</li><li>&amp;&amp;</li><li>? : </li><li>return null 阻止组件渲染</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>数组转化为数列元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">      <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number, index</span>) =&gt;</span></span><br><span class="line">            &lt;li key=&#123;index&#125;&gt;&#123;number&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">      return (</span></span><br><span class="line"><span class="regexp">            &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">      &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li>受控组件 </li><li>input、select、textarea</li><li>checkBox</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;<span class="attr">value</span>: <span class="string">''</span>&#125;;</span><br><span class="line">handleChange(event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value.toUpperCase()&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染表单</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.state.value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">&lt;textarea value=&#123;<span class="keyword">this</span>.state.value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;select value=&#123;<span class="keyword">this</span>.state.value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125;&gt;</span><br><span class="line">   &lt;option value=<span class="string">"grapefruit"</span>&gt;Grapefruit&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">   &lt;option value="lime"&gt;Lime&lt;/</span>option&gt;</span><br><span class="line">   &lt;option value=<span class="string">"coconut"</span>&gt;Coconut&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">   &lt;option value="mango"&gt;Mango&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br></pre></td></tr></table></figure><h2 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h2><p>状态分享，将state数据 提升至 离他们最近的父组件中进行管理<br>私有state，handleChange -&gt; 转化为 父组件props</p><p><a href="https://react.docschina.org/docs/hello-world.html" target="_blank" rel="noopener">api</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js模块化——AMD与CMD的区别</title>
      <link href="/2019/02/15/js%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2019/02/15/js%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>模块系统</p><ol><li>定义封装的模块</li><li>管理模块之间的依赖关系</li><li>引入模块</li></ol><h2 id="AMD-异步模块定义"><a href="#AMD-异步模块定义" class="headerlink" title="AMD 异步模块定义"></a>AMD 异步模块定义</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>提前执行依赖模块，预加载</li><li>推崇依赖前置</li></ul><h3 id="requireJs"><a href="#requireJs" class="headerlink" title="requireJs"></a>requireJs</h3><ul><li><strong>require.config()</strong> 模块加载自定义 require_conf.js<ul><li>一个文件一个模块</li><li>加载规范化模块 define()定义</li><li>加载非规范化的模块，如jquery</li></ul></li><li><strong>define()</strong> 模块定义<ul><li>id 模块标识</li><li>dependencies模块依赖</li><li>factory 实例化函数/对象</li></ul></li><li><strong>r.js</strong> 合并与压缩模块文件<ul><li>build.js 打包配置文件</li><li>node r.js -o build.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 独立模块</span></span><br><span class="line">define(&#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 非独立模块</span></span><br><span class="line">define([<span class="string">'alpha'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">alpha</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 包装模块，暴露api</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base = <span class="built_in">require</span>(<span class="string">'base'</span>) <span class="comment">// 兼容commonJs写法，但仍然是提前加载</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">export</span> = &#123;</span><br><span class="line">        add: addFun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addFun</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">export</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>r.js配置参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(&#123;</span><br><span class="line">    appDir: <span class="string">'./'</span>, <span class="comment">// 应用程序目录</span></span><br><span class="line">    baseUrl: <span class="string">'./js'</span>, <span class="comment">// js的相对目录</span></span><br><span class="line">    dir: <span class="string">'./dist'</span>, <span class="comment">// 输出目录</span></span><br><span class="line">    modules: [ <span class="comment">// 一个包含多个对象的数组，模块</span></span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'main'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    fileExclusionRegExp: <span class="regexp">/^(r|build)\.js$/</span>, <span class="comment">// 排除规则</span></span><br><span class="line">    optimizeCss: <span class="string">'standard'</span>,</span><br><span class="line">    removeCombined: <span class="literal">true</span>, <span class="comment">// 输出目录中删除已合并的文件</span></span><br><span class="line">    paths: &#123; <span class="comment">// 模块的相对目录</span></span><br><span class="line">        jquery: <span class="string">'lib/jquery'</span>,</span><br><span class="line">        underscore: <span class="string">'lib/underscore'</span>,</span><br><span class="line">        backbone: <span class="string">'lib/backbone/backbone'</span>,</span><br><span class="line">        backboneLocalstorage: <span class="string">'lib/backbone/backbone.localStorage'</span>,</span><br><span class="line">        text: <span class="string">'lib/require/text'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    shim: &#123; <span class="comment">// 非规范定义的模块</span></span><br><span class="line">        underscore: &#123;</span><br><span class="line">            exports: <span class="string">'_'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        backbone: &#123;</span><br><span class="line">            deps: [</span><br><span class="line">                <span class="string">'underscore'</span>,</span><br><span class="line">                <span class="string">'jquery'</span></span><br><span class="line">            ],</span><br><span class="line">            exports: <span class="string">'Backbone'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        backboneLocalstorage: &#123;</span><br><span class="line">            deps: [<span class="string">'backbone'</span>],</span><br><span class="line">            exports: <span class="string">'Store'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="noopener">api</a>)</p><h2 id="CMD-公共模块定义"><a href="#CMD-公共模块定义" class="headerlink" title="CMD 公共模块定义"></a>CMD 公共模块定义</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>延迟执行依赖模块，按需加载，懒加载</li><li>推崇依赖就近</li><li>同步加载，文件加载完才能执行操作</li></ul><h3 id="seaJs"><a href="#seaJs" class="headerlink" title="seaJs"></a>seaJs</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, export, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)</span><br><span class="line">    <span class="comment">// 软依赖</span></span><br><span class="line">    <span class="keyword">if</span> (status) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="commonJs"><a href="#commonJs" class="headerlink" title="commonJs"></a>commonJs</h2><ul><li>同步加载，文件加载完才能执行操作</li><li>服务端模块规范 </li><li>node，webpack通过commonJs规范实现</li><li>定义模块<ul><li>require 引入模块</li><li>exports 导出当前模块属性</li><li>module 模块</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file1.js</span></span><br><span class="line">moudle.exports = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//file2.js</span></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="built_in">require</span>(<span class="string">'./file1'</span>);</span><br><span class="line"><span class="keyword">var</span> v = f1.a + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">module</span>.exports =&#123;</span><br><span class="line">  v: v</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="UMD-通用模块定义"><a href="#UMD-通用模块定义" class="headerlink" title="UMD 通用模块定义"></a>UMD 通用模块定义</h2><ul><li>AMD和commonJs的糅合，解决跨平台问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="built_in">module</span>.exports = factory(); <span class="comment">// 支持node模块则使用commonJs</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        define(factory); <span class="comment">// amd 方式加载</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 都不是，全局定义</span></span><br><span class="line">        <span class="built_in">window</span>.eventUtil = factory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// module ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css命名规范——NEC与BEM</title>
      <link href="/2019/02/15/css%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2019/02/15/css%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="命名方式"><a href="#命名方式" class="headerlink" title="命名方式"></a>命名方式</h2><h3 id="NEC"><a href="#NEC" class="headerlink" title="NEC"></a>NEC</h3><p>网易CSS方案：<a href="http://nec.netease.com/standard/css-sort.html" target="_blank" rel="noopener">NEC</a></p><p>CSS内部的分类及其顺序：</p><ul><li><strong>重置（reset）和默认（base）（tags）</strong><br>消除默认样式和浏览器差异，并设置部分标签的初始样式，以减少后面的重复劳动</li><li><strong>统一处理</strong><br>建议在这个位置统一调用背景图（这里指多个布局或模块或元件共用的图）和清除浮动（这里指通用性较高的布局、模块、元件内的清除）等统一设置处理的样式</li><li><strong>布局 grid（g-）</strong><br>将页面分割为几个大块，如头部、尾部、主体、侧栏等</li><li><strong>模块 module（m-）</strong><br>较大整体，如导航、登录注册、列表、评论、搜索等</li><li><strong>元件 unit（u-）</strong><br>不可再分个体，如按钮、input、loading、图标等</li><li><strong>功能 function（f-）</strong><br>使用率较高的样式，如清除浮动等</li><li><strong>皮肤 skin（s-）</strong><br>如文字色、背景色（图）、边框色等</li><li><strong>状态（z-）</strong><br>如hover，选中等</li></ul><h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h3><p>Yandex的CSS命名方法论：<a href="https://en.bem.info/" target="_blank" rel="noopener">BEM</a></p><ul><li><strong>块</strong><br>.block，更高级别的抽象或组件</li><li><strong>元素</strong><br>.block__element，块的后代元素</li><li><strong>修饰符</strong><br>.block–modifier，块的不同状态或版本</li></ul><h2 id="两者结合使用"><a href="#两者结合使用" class="headerlink" title="两者结合使用"></a>两者结合使用</h2><p>可以避免使用BEM导致css命名冗长<br>使用NEC区分出元件后，再对元件使用BEM命名模式</p><p>如：</p><ul><li>g_header，g_footer，g_main，g_cont</li><li>m_title<br>  u_title，u_title–2</li><li>m_drawList<br>u_item，u_item–0，u_drawbg，u_drawName，u_img</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node版本管理工具——nvm</title>
      <link href="/2019/02/15/node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>/2019/02/15/node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="nvm-——-node-版本管理"><a href="#nvm-——-node-版本管理" class="headerlink" title="nvm —— node 版本管理"></a>nvm —— node 版本管理</h2><ol><li>先卸载原来的node</li><li>下载nvm<ul><li><a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">github</a></li><li><a href="https://github.com/coreybutler/nvm-windows/releases/download/1.1.7/nvm-setup.zip" target="_blank" rel="noopener">download</a></li></ul></li><li>安装<ul><li>注意安装路径不能有空格</li><li>NVM环境变量的用户和系统变量要与setting.txt设置的路径一致</li></ul></li></ol><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm install version</span><br><span class="line">nvm ls</span><br><span class="line">nvm user version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序登录流程</title>
      <link href="/2019/02/13/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95/"/>
      <url>/2019/02/13/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><ul><li><code>&lt;open-data&gt;</code> 组件，可直接获取基本的用户数据</li><li>需要登录的接口 -&gt; buildHeader<ul><li>无code：wx.login 获取code</li><li>有code：headers 设置 wx_code</li></ul></li><li>授权回调 -&gt;userInfo</li><li>定期wx.checkSession检测 session_key 是否过期</li><li>wx.request 发送code到服务端<ul><li>x-check-login 用于判断是否需要登录校验</li></ul></li></ul><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><ul><li>是否需要登录校验</li><li>根据code 进行 jscode2session 登录校验 -&gt; 没有code</li><li>checkUser _user</li></ul><h4 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h4><ul><li><strong>code</strong> 临时登录凭证（有效期五分钟，只能使用一次）<ul><li>client: wx.login() -&gt; code</li><li>header 封装自定义登录态（用于需要静默登录的接口）<ul><li>X-Wx-Code: code</li><li>X-Wx-Rawdata: random</li><li>User-Agent: token</li></ul></li><li>client: wx.request(avatar、nickname) -&gt; openid</li></ul></li><li><strong>appid</strong> 小程序唯一标识、appsecret 小程序密钥</li><li><strong>session_key</strong> 会话密钥（对用户数据进行加密签名）、openid 用户唯一标识<ul><li>server: code + appid + appsecret -&gt; jscode2session -&gt; openid、session_key、unionid</li><li>jscode2session 登录凭证校验接口</li></ul></li><li><strong>3rd_session</strong></li><li><strong>unioinid</strong> 用户在微信开放平台的唯一标识。<ul><li>同一个用户，在同一个微信开放平台下的不同应用，unionid是相同的</li><li>云函数 cloud.getWXContext 获取 unionId</li></ul></li><li><strong>accessToken</strong> 后台接口调用凭证<ul><li>server: appid + appsecret -&gt; getAccessToken</li><li>getAccessToken</li></ul></li></ul><p><img src="/2019/02/13/小程序登录/Image.png" alt="小程序登录流程时序图"><br><a href="https://segmentfault.com/a/1190000012731720" target="_blank" rel="noopener">参考</a><br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html" target="_blank" rel="noopener">api</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强缓存与协商缓存的区别及缓存优化</title>
      <link href="/2019/02/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
      <url>/2019/02/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>url请求过程中，浏览器会根据缓存机制保存请求的资源。当浏览器再次请求相同的url时，会根据header标识判断是否使用缓存。<br>强缓存是浏览器本地缓存，根据缓存的cache-control和expires判断资源是否过期，未过期则不经过服务器请求，返回200。<br>协商缓存根据Etag和Last-modified判断是否有数据更新，是则读取浏览器缓存，更新请求header并返回304；否则经过服务器请求，返回200，更新数据和请求header。</p><p>第一次请求：</p><p><img src="/2019/02/13/浏览器缓存/Image.png" alt="Image.png"></p><p>第二次请求：</p><p><img src="/2019/02/13/浏览器缓存/Image2.png" alt="Image2.png"></p><h2 id="强缓存（本地缓存）"><a href="#强缓存（本地缓存）" class="headerlink" title="强缓存（本地缓存）"></a>强缓存（本地缓存）</h2><h3 id="1、特点"><a href="#1、特点" class="headerlink" title="1、特点"></a>1、特点</h3><ul><li>不发送请求到服务器</li><li>返回 200</li><li><p>from cache</p><ul><li><strong>from memory cache</strong><ul><li>内存中读取</li><li>关闭页面随内存释放</li><li>js、font、img</li></ul></li><li><strong>from disk cache</strong><ul><li>硬盘中读取</li><li>不会随页面关闭而释放</li><li>css（加载一次 disk -&gt; memory）</li></ul></li></ul></li></ul><h3 id="2、header字段"><a href="#2、header字段" class="headerlink" title="2、header字段"></a>2、header字段</h3><ul><li><p><strong>Cache-control</strong> : max-age=number（优先）http1.1</p><ul><li>no-cache 不是用本地缓存</li><li>no-store  禁止缓存</li><li>public     可被所有用户缓存：终端用户的浏览器、CDN等中间代理服务器</li><li>private    终端用户的浏览器</li></ul></li><li><p><strong>Expires</strong> : GMT http1.0</p><ul><li>GMT &gt; 发送请求的时间</li></ul></li></ul><hr><h2 id="协商缓存（由服务器决定）"><a href="#协商缓存（由服务器决定）" class="headerlink" title="协商缓存（由服务器决定）"></a>协商缓存（由服务器决定）</h2><h3 id="1、特点-1"><a href="#1、特点-1" class="headerlink" title="1、特点"></a>1、特点</h3><ul><li>返回 304，not modified</li><li>通过服务器告知缓存可用</li><li>更新header信息，不更新返回数据   <ul><li>header报文大小</li></ul></li></ul><h3 id="2、header字段-1"><a href="#2、header字段-1" class="headerlink" title="2、header字段"></a>2、header字段</h3><ul><li><strong>Etag</strong>/If-None-Match：string（优先） http1.1<ul><li>资源唯一标识符，资源变化会更新</li><li>优点：更准确的控制缓存<ul><li>精确到秒以下的粒度</li><li>内容不变，修改时间变化的情况下使用缓存</li></ul></li></ul></li><li><strong>Last-modified</strong>/If-Modified-Since: GMT<ul><li>GMT 最后修改时间 == 资源在服务器最后修改时间<ul><li>== 304 not modified，不返回资源内容，response header更新</li><li>!= 200，重新加载资源，header Last-modified更新</li></ul></li></ul></li></ul><hr><h2 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h2><h3 id="1、三级缓存原理"><a href="#1、三级缓存原理" class="headerlink" title="1、三级缓存原理"></a>1、三级缓存原理</h3><ol><li>内存 ↓ （强缓存）</li><li>硬盘 ↓ （强缓存）</li><li>网络请求 ↓<ul><li>200 请求</li><li>304 （协议缓存，只更新header）</li></ul></li><li>缓存到硬盘和内存</li></ol><h3 id="2、缓存优化思路"><a href="#2、缓存优化思路" class="headerlink" title="2、缓存优化思路"></a>2、缓存优化思路</h3><ol><li>200 -&gt; 304 -&gt; 本地缓存</li><li>更新url版本号，使浏览器重新请求资源</li><li>文件级别的精确缓存控制<ul><li>文件内容变化才变更url</li><li>将url改成带 文件摘要信息</li></ul></li><li>静态资源CDN节点部署<ul><li>性能优化：静态资源和动态网页分集群部署，静态资源部署到CDN节点</li><li>覆盖式发布：部署页面和部署资源的先后顺序：资源 -&gt; 页面</li></ul></li><li>非覆盖式发布<ul><li>用文件摘要信息 对资源文件进行重命名，不覆盖原有的资源文件</li><li>全量部署静态资源，再灰度部署页面</li></ul></li></ol><h3 id="3、静态资源缓存控制方案"><a href="#3、静态资源缓存控制方案" class="headerlink" title="3、静态资源缓存控制方案"></a>3、静态资源缓存控制方案</h3><ol><li>配置超长时间的本地缓存：节省带宽</li><li>提高性能采用内容摘要作为缓存更新依据：精确的缓存控制</li><li>静态资源CDN部署： 优化网络请求</li><li>更新资源发布路径实现非覆盖式发布： 平滑升级</li></ol><p>ps：from <a href="https://www.zhihu.com/question/20790576" target="_blank" rel="noopener">大公司的缓存优化</a> </p><h5 id="4、实现工具"><a href="#4、实现工具" class="headerlink" title="4、实现工具"></a>4、实现工具</h5><p><a href="https://ruby-china.github.io/rails-guides/asset_pipeline.html" target="_blank" rel="noopener">rails assets pipeline</a><br><a href="https://link.zhihu.com/?target=https%3A//github.com/fouber/static-resource-digest-project" target="_blank" rel="noopener">F.I.S</a> <a href="https://github.com/fouber/static-resource-digest-project-release" target="_blank" rel="noopener">F.I.S发布项目</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件机制之事件冒泡与事件捕获</title>
      <link href="/2019/02/10/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E4%B9%8B%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/"/>
      <url>/2019/02/10/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E4%B9%8B%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>dom事件流的三个阶段：</p><ul><li>事件捕获阶段 capturing：从外到里进行事件传播，从根节点开始</li><li>目标阶段</li><li>事件冒泡阶段 bubbling：从里到外进行事件传播，直到根节点</li></ul><p>触发dom事件时，先进行事件捕获 外-&gt;里，捕获到事件源之后通过事件传播，再进行事件冒泡 里 -&gt; 外。</p><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul><li><strong>addEventListener(event, listener, userCapture)</strong>（ie11及以上，支持事件捕获）<ul><li>event: string</li><li>listener: Function 事件监听函数<ol><li><code>e.stopPropagation()</code> 阻止事件冒泡到父元素</li><li>e.preventDefault() 阻止浏览器默认行为：如阻止href，input提交</li><li>e.stopImmediatePropagation()</li><li>return false，包括<ul><li>1 阻止冒泡</li><li>2 阻止默认行为</li><li>停止回调函数并立即返回</li></ul></li></ol></li><li><code>useCapture</code> : boolean<ul><li>默认为 false，采用事件冒泡的方式</li><li>true，采用事件捕获的方式</li></ul></li></ul></li><li><strong>attachEvent(event, listener)</strong>（ie10及以下，不支持事件捕获）<ul><li>event</li><li>listener</li></ul></li></ul><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><ul><li>一般用于动态生成的dom</li><li><strong>$(selector).on(event, childSelector, data, function, map)</strong></li><li>通过父元素的事件绑定，判断目标元素是否为子元素</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码转换函数与uri、url区别</title>
      <link href="/2019/02/10/uri%E4%B8%8Eurl%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/02/10/uri%E4%B8%8Eurl%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="encodeURI"><a href="#encodeURI" class="headerlink" title="encodeURI()"></a>encodeURI()</h3><ul><li>用于整个 URI 的编码，不会对本身属于 URI 的特殊字符进行编码，如冒号、正斜杠、问号和井号；</li><li>不会进行编码的字符：ASCII字母、数字、~!@#$&amp;*()=:/,;?+’</li><li>对应的解码函数 decodeURI()</li><li>类似escape()，但escape只针对字符串编码</li></ul><h3 id="encodeURIComponent"><a href="#encodeURIComponent" class="headerlink" title="encodeURIComponent()"></a>encodeURIComponent()</h3><ul><li>用于对 URI 中的某一部分进行编码，会对它发现的任何非标准字符进行编码。</li><li>不会进行编码的字符：ASCII字母、数字、~!*()’</li><li>对应的解码函数 decodeURIComponent()</li></ul><h3 id="uri与url"><a href="#uri与url" class="headerlink" title="uri与url"></a>uri与url</h3><ul><li>uri 统一资源标识符,是一个用于标识某一互联网资源名称的字符串</li><li>url 统一资源定位，是互联网上标准资源的地址</li></ul><p><img src="/2019/02/10/uri与url区别/Image.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
